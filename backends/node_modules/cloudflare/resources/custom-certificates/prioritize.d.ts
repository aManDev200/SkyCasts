import * as Core from "../../core.js";
import { APIResource } from "../../resource.js";
import * as PrioritizeAPI from "./prioritize.js";
import * as CustomCertificatesAPI from "./custom-certificates.js";
export declare class Prioritize extends APIResource {
    /**
     * If a zone has multiple SSL certificates, you can set the order in which they
     * should be used during a request. The higher priority will break ties across
     * overlapping 'legacy_custom' certificates.
     */
    update(params: PrioritizeUpdateParams, options?: Core.RequestOptions): Core.APIPromise<PrioritizeUpdateResponse | null>;
}
export type PrioritizeUpdateResponse = Array<CustomCertificatesAPI.CustomCertificate>;
export interface PrioritizeUpdateParams {
    /**
     * Path param: Identifier
     */
    zone_id: string;
    /**
     * Body param: Array of ordered certificates.
     */
    certificates: Array<PrioritizeUpdateParams.Certificate>;
}
export declare namespace PrioritizeUpdateParams {
    interface Certificate {
        /**
         * The order/priority in which the certificate will be used in a request. The
         * higher priority will break ties across overlapping 'legacy_custom' certificates,
         * but 'legacy_custom' certificates will always supercede 'sni_custom'
         * certificates.
         */
        priority?: number;
    }
}
export declare namespace Prioritize {
    export import PrioritizeUpdateResponse = PrioritizeAPI.PrioritizeUpdateResponse;
    export import PrioritizeUpdateParams = PrioritizeAPI.PrioritizeUpdateParams;
}
//# sourceMappingURL=prioritize.d.ts.map