import * as Core from "../../core.js";
import { APIResource } from "../../resource.js";
import * as IncomingAPI from "./incoming.js";
export declare class IncomingResource extends APIResource {
    /**
     * Create secondary zone configuration for incoming zone transfers.
     */
    create(params: IncomingCreateParams, options?: Core.RequestOptions): Core.APIPromise<IncomingCreateResponse>;
    /**
     * Update secondary zone configuration for incoming zone transfers.
     */
    update(params: IncomingUpdateParams, options?: Core.RequestOptions): Core.APIPromise<IncomingUpdateResponse>;
    /**
     * Delete secondary zone configuration for incoming zone transfers.
     */
    delete(params: IncomingDeleteParams, options?: Core.RequestOptions): Core.APIPromise<IncomingDeleteResponse>;
    /**
     * Get secondary zone configuration for incoming zone transfers.
     */
    get(params: IncomingGetParams, options?: Core.RequestOptions): Core.APIPromise<IncomingGetResponse>;
}
export interface Incoming {
    id?: string;
    /**
     * How often should a secondary zone auto refresh regardless of DNS NOTIFY. Not
     * applicable for primary zones.
     */
    auto_refresh_seconds?: number;
    /**
     * The time for a specific event.
     */
    checked_time?: string;
    /**
     * The time for a specific event.
     */
    created_time?: string;
    /**
     * The time for a specific event.
     */
    modified_time?: string;
    /**
     * Zone name.
     */
    name?: string;
    /**
     * A list of peer tags.
     */
    peers?: Array<unknown>;
    /**
     * The serial number of the SOA for the given zone.
     */
    soa_serial?: number;
}
export interface IncomingCreateResponse {
    id?: string;
    /**
     * How often should a secondary zone auto refresh regardless of DNS NOTIFY. Not
     * applicable for primary zones.
     */
    auto_refresh_seconds?: number;
    /**
     * The time for a specific event.
     */
    checked_time?: string;
    /**
     * The time for a specific event.
     */
    created_time?: string;
    /**
     * The time for a specific event.
     */
    modified_time?: string;
    /**
     * Zone name.
     */
    name?: string;
    /**
     * A list of peer tags.
     */
    peers?: Array<unknown>;
    /**
     * The serial number of the SOA for the given zone.
     */
    soa_serial?: number;
}
export interface IncomingUpdateResponse {
    id?: string;
    /**
     * How often should a secondary zone auto refresh regardless of DNS NOTIFY. Not
     * applicable for primary zones.
     */
    auto_refresh_seconds?: number;
    /**
     * The time for a specific event.
     */
    checked_time?: string;
    /**
     * The time for a specific event.
     */
    created_time?: string;
    /**
     * The time for a specific event.
     */
    modified_time?: string;
    /**
     * Zone name.
     */
    name?: string;
    /**
     * A list of peer tags.
     */
    peers?: Array<unknown>;
    /**
     * The serial number of the SOA for the given zone.
     */
    soa_serial?: number;
}
export interface IncomingDeleteResponse {
    id?: string;
}
export interface IncomingGetResponse {
    id?: string;
    /**
     * How often should a secondary zone auto refresh regardless of DNS NOTIFY. Not
     * applicable for primary zones.
     */
    auto_refresh_seconds?: number;
    /**
     * The time for a specific event.
     */
    checked_time?: string;
    /**
     * The time for a specific event.
     */
    created_time?: string;
    /**
     * The time for a specific event.
     */
    modified_time?: string;
    /**
     * Zone name.
     */
    name?: string;
    /**
     * A list of peer tags.
     */
    peers?: Array<unknown>;
    /**
     * The serial number of the SOA for the given zone.
     */
    soa_serial?: number;
}
export interface IncomingCreateParams {
    /**
     * Path param:
     */
    zone_id: string;
    /**
     * Body param: How often should a secondary zone auto refresh regardless of DNS
     * NOTIFY. Not applicable for primary zones.
     */
    auto_refresh_seconds: number;
    /**
     * Body param: Zone name.
     */
    name: string;
    /**
     * Body param: A list of peer tags.
     */
    peers: Array<unknown>;
}
export interface IncomingUpdateParams {
    /**
     * Path param:
     */
    zone_id: string;
    /**
     * Body param: How often should a secondary zone auto refresh regardless of DNS
     * NOTIFY. Not applicable for primary zones.
     */
    auto_refresh_seconds: number;
    /**
     * Body param: Zone name.
     */
    name: string;
    /**
     * Body param: A list of peer tags.
     */
    peers: Array<unknown>;
}
export interface IncomingDeleteParams {
    zone_id: string;
}
export interface IncomingGetParams {
    zone_id: string;
}
export declare namespace IncomingResource {
    export import Incoming = IncomingAPI.Incoming;
    export import IncomingCreateResponse = IncomingAPI.IncomingCreateResponse;
    export import IncomingUpdateResponse = IncomingAPI.IncomingUpdateResponse;
    export import IncomingDeleteResponse = IncomingAPI.IncomingDeleteResponse;
    export import IncomingGetResponse = IncomingAPI.IncomingGetResponse;
    export import IncomingCreateParams = IncomingAPI.IncomingCreateParams;
    export import IncomingUpdateParams = IncomingAPI.IncomingUpdateParams;
    export import IncomingDeleteParams = IncomingAPI.IncomingDeleteParams;
    export import IncomingGetParams = IncomingAPI.IncomingGetParams;
}
//# sourceMappingURL=incoming.d.ts.map