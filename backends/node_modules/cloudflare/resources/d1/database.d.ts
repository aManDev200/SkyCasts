import * as Core from "../../core.js";
import { APIResource } from "../../resource.js";
import * as DatabaseAPI from "./database.js";
import * as D1API from "./d1.js";
import { V4PagePaginationArray, type V4PagePaginationArrayParams } from "../../pagination.js";
export declare class Database extends APIResource {
    /**
     * Returns the created D1 database.
     */
    create(params: DatabaseCreateParams, options?: Core.RequestOptions): Core.APIPromise<DatabaseCreateResponse>;
    /**
     * Returns a list of D1 databases.
     */
    list(params: DatabaseListParams, options?: Core.RequestOptions): Core.PagePromise<DatabaseListResponsesV4PagePaginationArray, DatabaseListResponse>;
    /**
     * Deletes the specified D1 database.
     */
    delete(databaseId: string, params: DatabaseDeleteParams, options?: Core.RequestOptions): Core.APIPromise<DatabaseDeleteResponse>;
    /**
     * Returns the specified D1 database.
     */
    get(databaseId: string, params: DatabaseGetParams, options?: Core.RequestOptions): Core.APIPromise<D1API.D1>;
    /**
     * Returns the query result as an object.
     */
    query(databaseId: string, params: DatabaseQueryParams, options?: Core.RequestOptions): Core.APIPromise<DatabaseQueryResponse>;
    /**
     * Returns the query result rows as arrays rather than objects. This is a
     * performance-optimized version of the /query endpoint.
     */
    raw(databaseId: string, params: DatabaseRawParams, options?: Core.RequestOptions): Core.APIPromise<DatabaseRawResponse>;
}
export declare class DatabaseListResponsesV4PagePaginationArray extends V4PagePaginationArray<DatabaseListResponse> {
}
export interface QueryResult {
    meta?: QueryResult.Meta;
    results?: Array<unknown>;
    success?: boolean;
}
export declare namespace QueryResult {
    interface Meta {
        changed_db?: boolean;
        changes?: number;
        duration?: number;
        last_row_id?: number;
        rows_read?: number;
        rows_written?: number;
        size_after?: number;
    }
}
export interface DatabaseCreateResponse {
    /**
     * Specifies the timestamp the resource was created as an ISO8601 string.
     */
    created_at?: string;
    name?: string;
    uuid?: string;
    version?: string;
}
export interface DatabaseListResponse {
    /**
     * Specifies the timestamp the resource was created as an ISO8601 string.
     */
    created_at?: string;
    name?: string;
    uuid?: string;
    version?: string;
}
export type DatabaseDeleteResponse = unknown | string | null;
export type DatabaseQueryResponse = Array<QueryResult>;
export type DatabaseRawResponse = Array<DatabaseRawResponse.DatabaseRawResponseItem>;
export declare namespace DatabaseRawResponse {
    interface DatabaseRawResponseItem {
        meta?: DatabaseRawResponseItem.Meta;
        results?: DatabaseRawResponseItem.Results;
        success?: boolean;
    }
    namespace DatabaseRawResponseItem {
        interface Meta {
            changed_db?: boolean;
            changes?: number;
            duration?: number;
            last_row_id?: number;
            rows_read?: number;
            rows_written?: number;
            size_after?: number;
        }
        interface Results {
            columns?: Array<string>;
            rows?: Array<Array<number | string | unknown>>;
        }
    }
}
export interface DatabaseCreateParams {
    /**
     * Path param: Account identifier tag.
     */
    account_id: string;
    /**
     * Body param:
     */
    name: string;
}
export interface DatabaseListParams extends V4PagePaginationArrayParams {
    /**
     * Path param: Account identifier tag.
     */
    account_id: string;
    /**
     * Query param: a database name to search for.
     */
    name?: string;
}
export interface DatabaseDeleteParams {
    /**
     * Account identifier tag.
     */
    account_id: string;
}
export interface DatabaseGetParams {
    /**
     * Account identifier tag.
     */
    account_id: string;
}
export interface DatabaseQueryParams {
    /**
     * Path param: Account identifier tag.
     */
    account_id: string;
    /**
     * Body param:
     */
    sql: string;
    /**
     * Body param:
     */
    params?: Array<string>;
}
export interface DatabaseRawParams {
    /**
     * Path param: Account identifier tag.
     */
    account_id: string;
    /**
     * Body param:
     */
    sql: string;
    /**
     * Body param:
     */
    params?: Array<string>;
}
export declare namespace Database {
    export import QueryResult = DatabaseAPI.QueryResult;
    export import DatabaseCreateResponse = DatabaseAPI.DatabaseCreateResponse;
    export import DatabaseListResponse = DatabaseAPI.DatabaseListResponse;
    export import DatabaseDeleteResponse = DatabaseAPI.DatabaseDeleteResponse;
    export import DatabaseQueryResponse = DatabaseAPI.DatabaseQueryResponse;
    export import DatabaseRawResponse = DatabaseAPI.DatabaseRawResponse;
    export import DatabaseListResponsesV4PagePaginationArray = DatabaseAPI.DatabaseListResponsesV4PagePaginationArray;
    export import DatabaseCreateParams = DatabaseAPI.DatabaseCreateParams;
    export import DatabaseListParams = DatabaseAPI.DatabaseListParams;
    export import DatabaseDeleteParams = DatabaseAPI.DatabaseDeleteParams;
    export import DatabaseGetParams = DatabaseAPI.DatabaseGetParams;
    export import DatabaseQueryParams = DatabaseAPI.DatabaseQueryParams;
    export import DatabaseRawParams = DatabaseAPI.DatabaseRawParams;
}
//# sourceMappingURL=database.d.ts.map