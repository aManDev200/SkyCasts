import * as Core from "../../../core.js";
import { APIResource } from "../../../resource.js";
import * as ConnectionsAPI from "./connections.js";
export declare class Connections extends APIResource {
    /**
     * Removes connections that are in a disconnected or pending reconnect state. We
     * recommend running this command after shutting down a tunnel.
     */
    delete(tunnelId: string, params: ConnectionDeleteParams, options?: Core.RequestOptions): Core.APIPromise<ConnectionDeleteResponse>;
    /**
     * Fetches connection details for a Cloudflare Tunnel.
     */
    get(tunnelId: string, params: ConnectionGetParams, options?: Core.RequestOptions): Core.APIPromise<ConnectionGetResponse | null>;
}
/**
 * A client (typically cloudflared) that maintains connections to a Cloudflare data
 * center.
 */
export interface Client {
    /**
     * UUID of the Cloudflare Tunnel connection.
     */
    id?: string;
    /**
     * The cloudflared OS architecture used to establish this connection.
     */
    arch?: string;
    /**
     * The version of the remote tunnel configuration. Used internally to sync
     * cloudflared with the Zero Trust dashboard.
     */
    config_version?: number;
    /**
     * The Cloudflare Tunnel connections between your origin and Cloudflare's edge.
     */
    conns?: Array<Client.Conn>;
    /**
     * Features enabled for the Cloudflare Tunnel.
     */
    features?: Array<string>;
    /**
     * Timestamp of when the tunnel connection was started.
     */
    run_at?: string;
    /**
     * The cloudflared version used to establish this connection.
     */
    version?: string;
}
export declare namespace Client {
    interface Conn {
        /**
         * UUID of the Cloudflare Tunnel connection.
         */
        id?: string;
        /**
         * UUID of the Cloudflare Tunnel connector.
         */
        client_id?: string;
        /**
         * The cloudflared version used to establish this connection.
         */
        client_version?: string;
        /**
         * The Cloudflare data center used for this connection.
         */
        colo_name?: string;
        /**
         * Cloudflare continues to track connections for several minutes after they
         * disconnect. This is an optimization to improve latency and reliability of
         * reconnecting. If `true`, the connection has disconnected but is still being
         * tracked. If `false`, the connection is actively serving traffic.
         */
        is_pending_reconnect?: boolean;
        /**
         * Timestamp of when the connection was established.
         */
        opened_at?: string;
        /**
         * The public IP address of the host running cloudflared.
         */
        origin_ip?: string;
        /**
         * UUID of the Cloudflare Tunnel connection.
         */
        uuid?: string;
    }
}
export type ConnectionDeleteResponse = unknown | Array<unknown> | string;
export type ConnectionGetResponse = Array<Client>;
export interface ConnectionDeleteParams {
    /**
     * Cloudflare account ID
     */
    account_id: string;
}
export interface ConnectionGetParams {
    /**
     * Cloudflare account ID
     */
    account_id: string;
}
export declare namespace Connections {
    export import Client = ConnectionsAPI.Client;
    export import ConnectionDeleteResponse = ConnectionsAPI.ConnectionDeleteResponse;
    export import ConnectionGetResponse = ConnectionsAPI.ConnectionGetResponse;
    export import ConnectionDeleteParams = ConnectionsAPI.ConnectionDeleteParams;
    export import ConnectionGetParams = ConnectionsAPI.ConnectionGetParams;
}
//# sourceMappingURL=connections.d.ts.map