import * as Core from "../../../../core.js";
import { APIResource } from "../../../../resource.js";
import * as FallbackDomainsAPI from "./fallback-domains.js";
import { SinglePage } from "../../../../pagination.js";
export declare class FallbackDomains extends APIResource {
    /**
     * Sets the list of domains to bypass Gateway DNS resolution. These domains will
     * use the specified local DNS resolver instead. This will only apply to the
     * specified device settings profile.
     */
    update(policyId: string, params: FallbackDomainUpdateParams, options?: Core.RequestOptions): Core.APIPromise<FallbackDomainUpdateResponse | null>;
    /**
     * Fetches a list of domains to bypass Gateway DNS resolution. These domains will
     * use the specified local DNS resolver instead.
     */
    list(params: FallbackDomainListParams, options?: Core.RequestOptions): Core.PagePromise<FallbackDomainsSinglePage, FallbackDomain>;
    /**
     * Fetches the list of domains to bypass Gateway DNS resolution from a specified
     * device settings profile. These domains will use the specified local DNS resolver
     * instead.
     */
    get(policyId: string, params: FallbackDomainGetParams, options?: Core.RequestOptions): Core.APIPromise<FallbackDomainGetResponse | null>;
}
export declare class FallbackDomainsSinglePage extends SinglePage<FallbackDomain> {
}
export interface FallbackDomain {
    /**
     * The domain suffix to match when resolving locally.
     */
    suffix: string;
    /**
     * A description of the fallback domain, displayed in the client UI.
     */
    description?: string;
    /**
     * A list of IP addresses to handle domain resolution.
     */
    dns_server?: Array<unknown>;
}
export interface FallbackDomainParam {
    /**
     * The domain suffix to match when resolving locally.
     */
    suffix: string;
    /**
     * A description of the fallback domain, displayed in the client UI.
     */
    description?: string;
    /**
     * A list of IP addresses to handle domain resolution.
     */
    dns_server?: Array<unknown>;
}
export type FallbackDomainPolicy = Array<FallbackDomain>;
export type FallbackDomainUpdateResponse = Array<FallbackDomain>;
export type FallbackDomainGetResponse = Array<FallbackDomain>;
export interface FallbackDomainUpdateParams {
    /**
     * Path param:
     */
    account_id: string;
    /**
     * Body param:
     */
    body: Array<FallbackDomainParam>;
}
export interface FallbackDomainListParams {
    account_id: string;
}
export interface FallbackDomainGetParams {
    account_id: string;
}
export declare namespace FallbackDomains {
    export import FallbackDomain = FallbackDomainsAPI.FallbackDomain;
    export import FallbackDomainPolicy = FallbackDomainsAPI.FallbackDomainPolicy;
    export import FallbackDomainUpdateResponse = FallbackDomainsAPI.FallbackDomainUpdateResponse;
    export import FallbackDomainGetResponse = FallbackDomainsAPI.FallbackDomainGetResponse;
    export import FallbackDomainsSinglePage = FallbackDomainsAPI.FallbackDomainsSinglePage;
    export import FallbackDomainUpdateParams = FallbackDomainsAPI.FallbackDomainUpdateParams;
    export import FallbackDomainListParams = FallbackDomainsAPI.FallbackDomainListParams;
    export import FallbackDomainGetParams = FallbackDomainsAPI.FallbackDomainGetParams;
}
//# sourceMappingURL=fallback-domains.d.ts.map