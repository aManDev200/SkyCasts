// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.
import { APIResource } from "../../../../resource.mjs";
import * as FallbackDomainsAPI from "./fallback-domains.mjs";
import { SinglePage } from "../../../../pagination.mjs";
export class FallbackDomains extends APIResource {
    /**
     * Sets the list of domains to bypass Gateway DNS resolution. These domains will
     * use the specified local DNS resolver instead. This will only apply to the
     * specified device settings profile.
     */
    update(policyId, params, options) {
        const { account_id, body } = params;
        return this._client.put(`/accounts/${account_id}/devices/policy/${policyId}/fallback_domains`, {
            body: body,
            ...options,
        })._thenUnwrap((obj) => obj.result);
    }
    /**
     * Fetches a list of domains to bypass Gateway DNS resolution. These domains will
     * use the specified local DNS resolver instead.
     */
    list(params, options) {
        const { account_id } = params;
        return this._client.getAPIList(`/accounts/${account_id}/devices/policy/fallback_domains`, FallbackDomainsSinglePage, options);
    }
    /**
     * Fetches the list of domains to bypass Gateway DNS resolution from a specified
     * device settings profile. These domains will use the specified local DNS resolver
     * instead.
     */
    get(policyId, params, options) {
        const { account_id } = params;
        return this._client.get(`/accounts/${account_id}/devices/policy/${policyId}/fallback_domains`, options)._thenUnwrap((obj) => obj.result);
    }
}
export class FallbackDomainsSinglePage extends SinglePage {
}
(function (FallbackDomains) {
    FallbackDomains.FallbackDomainsSinglePage = FallbackDomainsAPI.FallbackDomainsSinglePage;
})(FallbackDomains || (FallbackDomains = {}));
//# sourceMappingURL=fallback-domains.mjs.map