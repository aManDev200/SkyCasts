import * as Core from "../../../../core.js";
import { APIResource } from "../../../../resource.js";
import * as DatasetsAPI from "./datasets.js";
import * as UploadAPI from "./upload.js";
import { SinglePage } from "../../../../pagination.js";
export declare class Datasets extends APIResource {
    upload: UploadAPI.Upload;
    /**
     * Create a new dataset.
     */
    create(params: DatasetCreateParams, options?: Core.RequestOptions): Core.APIPromise<DatasetCreation>;
    /**
     * Update details about a dataset.
     */
    update(datasetId: string, params: DatasetUpdateParams, options?: Core.RequestOptions): Core.APIPromise<Dataset>;
    /**
     * Fetch all datasets with information about available versions.
     */
    list(params: DatasetListParams, options?: Core.RequestOptions): Core.PagePromise<DatasetsSinglePage, Dataset>;
    /**
     * Delete a dataset.
     *
     * This deletes all versions of the dataset.
     */
    delete(datasetId: string, params: DatasetDeleteParams, options?: Core.RequestOptions): Core.APIPromise<void>;
    /**
     * Fetch a specific dataset with information about available versions.
     */
    get(datasetId: string, params: DatasetGetParams, options?: Core.RequestOptions): Core.APIPromise<Dataset>;
}
export declare class DatasetsSinglePage extends SinglePage<Dataset> {
}
export interface Dataset {
    id: string;
    created_at: string;
    name: string;
    num_cells: number;
    secret: boolean;
    status: 'empty' | 'uploading' | 'failed' | 'complete';
    updated_at: string;
    uploads: Array<Dataset.Upload>;
    description?: string | null;
}
export declare namespace Dataset {
    interface Upload {
        num_cells: number;
        status: 'empty' | 'uploading' | 'failed' | 'complete';
        version: number;
    }
}
export type DatasetArray = Array<Dataset>;
export interface DatasetCreation {
    dataset: Dataset;
    max_cells: number;
    /**
     * The version to use when uploading the dataset.
     */
    version: number;
    /**
     * The secret to use for Exact Data Match datasets. This is not present in Custom
     * Wordlists.
     */
    secret?: string;
}
export interface DatasetCreateParams {
    /**
     * Path param:
     */
    account_id: string;
    /**
     * Body param:
     */
    name: string;
    /**
     * Body param:
     */
    description?: string | null;
    /**
     * Body param: Generate a secret dataset.
     *
     * If true, the response will include a secret to use with the EDM encoder. If
     * false, the response has no secret and the dataset is uploaded in plaintext.
     */
    secret?: boolean;
}
export interface DatasetUpdateParams {
    /**
     * Path param:
     */
    account_id: string;
    /**
     * Body param:
     */
    description?: string | null;
    /**
     * Body param:
     */
    name?: string | null;
}
export interface DatasetListParams {
    account_id: string;
}
export interface DatasetDeleteParams {
    account_id: string;
}
export interface DatasetGetParams {
    account_id: string;
}
export declare namespace Datasets {
    export import Dataset = DatasetsAPI.Dataset;
    export import DatasetArray = DatasetsAPI.DatasetArray;
    export import DatasetCreation = DatasetsAPI.DatasetCreation;
    export import DatasetsSinglePage = DatasetsAPI.DatasetsSinglePage;
    export import DatasetCreateParams = DatasetsAPI.DatasetCreateParams;
    export import DatasetUpdateParams = DatasetsAPI.DatasetUpdateParams;
    export import DatasetListParams = DatasetsAPI.DatasetListParams;
    export import DatasetDeleteParams = DatasetsAPI.DatasetDeleteParams;
    export import DatasetGetParams = DatasetsAPI.DatasetGetParams;
    export import Upload = UploadAPI.Upload;
    export import NewVersion = UploadAPI.NewVersion;
    export import UploadCreateParams = UploadAPI.UploadCreateParams;
    export import UploadEditParams = UploadAPI.UploadEditParams;
}
//# sourceMappingURL=datasets.d.ts.map