import * as Core from "../../../../core.js";
import { APIResource } from "../../../../resource.js";
import * as CAsAPI from "./cas.js";
import { SinglePage } from "../../../../pagination.js";
export declare class CAs extends APIResource {
    /**
     * Generates a new short-lived certificate CA and public key.
     */
    create(appId: string, params?: CACreateParams, options?: Core.RequestOptions): Core.APIPromise<CACreateResponse>;
    create(appId: string, options?: Core.RequestOptions): Core.APIPromise<CACreateResponse>;
    /**
     * Lists short-lived certificate CAs and their public keys.
     */
    list(params?: CAListParams, options?: Core.RequestOptions): Core.PagePromise<CAsSinglePage, CA>;
    list(options?: Core.RequestOptions): Core.PagePromise<CAsSinglePage, CA>;
    /**
     * Deletes a short-lived certificate CA.
     */
    delete(appId: string, params?: CADeleteParams, options?: Core.RequestOptions): Core.APIPromise<CADeleteResponse>;
    delete(appId: string, options?: Core.RequestOptions): Core.APIPromise<CADeleteResponse>;
    /**
     * Fetches a short-lived certificate CA and its public key.
     */
    get(appId: string, params?: CAGetParams, options?: Core.RequestOptions): Core.APIPromise<CAGetResponse>;
    get(appId: string, options?: Core.RequestOptions): Core.APIPromise<CAGetResponse>;
}
export declare class CAsSinglePage extends SinglePage<CA> {
}
export interface CA {
    /**
     * The ID of the CA.
     */
    id?: string;
    /**
     * The Application Audience (AUD) tag. Identifies the application associated with
     * the CA.
     */
    aud?: string;
    /**
     * The public key to add to your SSH server configuration.
     */
    public_key?: string;
}
export type CACreateResponse = unknown | string | null;
export interface CADeleteResponse {
    /**
     * The ID of the CA.
     */
    id?: string;
}
export type CAGetResponse = unknown | string | null;
export interface CACreateParams {
    /**
     * The Account ID to use for this endpoint. Mutually exclusive with the Zone ID.
     */
    account_id?: string;
    /**
     * The Zone ID to use for this endpoint. Mutually exclusive with the Account ID.
     */
    zone_id?: string;
}
export interface CAListParams {
    /**
     * The Account ID to use for this endpoint. Mutually exclusive with the Zone ID.
     */
    account_id?: string;
    /**
     * The Zone ID to use for this endpoint. Mutually exclusive with the Account ID.
     */
    zone_id?: string;
}
export interface CADeleteParams {
    /**
     * The Account ID to use for this endpoint. Mutually exclusive with the Zone ID.
     */
    account_id?: string;
    /**
     * The Zone ID to use for this endpoint. Mutually exclusive with the Account ID.
     */
    zone_id?: string;
}
export interface CAGetParams {
    /**
     * The Account ID to use for this endpoint. Mutually exclusive with the Zone ID.
     */
    account_id?: string;
    /**
     * The Zone ID to use for this endpoint. Mutually exclusive with the Account ID.
     */
    zone_id?: string;
}
export declare namespace CAs {
    export import CA = CAsAPI.CA;
    export import CACreateResponse = CAsAPI.CACreateResponse;
    export import CADeleteResponse = CAsAPI.CADeleteResponse;
    export import CAGetResponse = CAsAPI.CAGetResponse;
    export import CAsSinglePage = CAsAPI.CAsSinglePage;
    export import CACreateParams = CAsAPI.CACreateParams;
    export import CAListParams = CAsAPI.CAListParams;
    export import CADeleteParams = CAsAPI.CADeleteParams;
    export import CAGetParams = CAsAPI.CAGetParams;
}
//# sourceMappingURL=cas.d.ts.map