"use strict";
// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ScriptsSinglePage = exports.Scripts = void 0;
const resource_1 = require("../../../resource.js");
const ScriptsAPI = __importStar(require("./scripts.js"));
const ContentAPI = __importStar(require("./content.js"));
const DeploymentsAPI = __importStar(require("./deployments.js"));
const SchedulesAPI = __importStar(require("./schedules.js"));
const SettingsAPI = __importStar(require("./settings.js"));
const TailAPI = __importStar(require("./tail.js"));
const VersionsAPI = __importStar(require("./versions.js"));
const core_1 = require("../../../core.js");
const pagination_1 = require("../../../pagination.js");
class Scripts extends resource_1.APIResource {
    constructor() {
        super(...arguments);
        this.schedules = new SchedulesAPI.Schedules(this._client);
        this.tail = new TailAPI.Tail(this._client);
        this.content = new ContentAPI.Content(this._client);
        this.settings = new SettingsAPI.Settings(this._client);
        this.deployments = new DeploymentsAPI.Deployments(this._client);
        this.versions = new VersionsAPI.Versions(this._client);
    }
    /**
     * Upload a worker module.
     */
    update(scriptName, params, options) {
        const { account_id, rollback_to, ...body } = params;
        return this._client.put(`/accounts/${account_id}/workers/scripts/${scriptName}`, (0, core_1.maybeMultipartFormRequestOptions)({
            query: { rollback_to },
            body,
            ...options,
            headers: { 'Content-Type': 'application/javascript', ...options?.headers },
        }))._thenUnwrap((obj) => obj.result);
    }
    /**
     * Fetch a list of uploaded workers.
     */
    list(params, options) {
        const { account_id } = params;
        return this._client.getAPIList(`/accounts/${account_id}/workers/scripts`, ScriptsSinglePage, options);
    }
    /**
     * Delete your worker. This call has no response body on a successful delete.
     */
    delete(scriptName, params, options) {
        const { account_id, force } = params;
        return this._client.delete(`/accounts/${account_id}/workers/scripts/${scriptName}`, {
            query: { force },
            ...options,
            headers: { Accept: '*/*', ...options?.headers },
        });
    }
    /**
     * Fetch raw script content for your worker. Note this is the original script
     * content, not JSON encoded.
     */
    get(scriptName, params, options) {
        const { account_id } = params;
        return this._client.get(`/accounts/${account_id}/workers/scripts/${scriptName}`, {
            ...options,
            __binaryResponse: true,
        });
    }
}
exports.Scripts = Scripts;
class ScriptsSinglePage extends pagination_1.SinglePage {
}
exports.ScriptsSinglePage = ScriptsSinglePage;
(function (Scripts) {
    Scripts.ScriptsSinglePage = ScriptsAPI.ScriptsSinglePage;
    Scripts.Schedules = SchedulesAPI.Schedules;
    Scripts.Tail = TailAPI.Tail;
    Scripts.Content = ContentAPI.Content;
    Scripts.Settings = SettingsAPI.Settings;
    Scripts.Deployments = DeploymentsAPI.Deployments;
    Scripts.Versions = VersionsAPI.Versions;
    Scripts.VersionListResponsesV4PagePagination = VersionsAPI.VersionListResponsesV4PagePagination;
})(Scripts = exports.Scripts || (exports.Scripts = {}));
//# sourceMappingURL=scripts.js.map