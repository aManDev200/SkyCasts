// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.
import { APIResource } from "../../../resource.mjs";
import * as ScriptsAPI from "./scripts.mjs";
import * as ContentAPI from "./content.mjs";
import * as DeploymentsAPI from "./deployments.mjs";
import * as SchedulesAPI from "./schedules.mjs";
import * as SettingsAPI from "./settings.mjs";
import * as TailAPI from "./tail.mjs";
import * as VersionsAPI from "./versions.mjs";
import { maybeMultipartFormRequestOptions } from "../../../core.mjs";
import { SinglePage } from "../../../pagination.mjs";
export class Scripts extends APIResource {
    constructor() {
        super(...arguments);
        this.schedules = new SchedulesAPI.Schedules(this._client);
        this.tail = new TailAPI.Tail(this._client);
        this.content = new ContentAPI.Content(this._client);
        this.settings = new SettingsAPI.Settings(this._client);
        this.deployments = new DeploymentsAPI.Deployments(this._client);
        this.versions = new VersionsAPI.Versions(this._client);
    }
    /**
     * Upload a worker module.
     */
    update(scriptName, params, options) {
        const { account_id, rollback_to, ...body } = params;
        return this._client.put(`/accounts/${account_id}/workers/scripts/${scriptName}`, maybeMultipartFormRequestOptions({
            query: { rollback_to },
            body,
            ...options,
            headers: { 'Content-Type': 'application/javascript', ...options?.headers },
        }))._thenUnwrap((obj) => obj.result);
    }
    /**
     * Fetch a list of uploaded workers.
     */
    list(params, options) {
        const { account_id } = params;
        return this._client.getAPIList(`/accounts/${account_id}/workers/scripts`, ScriptsSinglePage, options);
    }
    /**
     * Delete your worker. This call has no response body on a successful delete.
     */
    delete(scriptName, params, options) {
        const { account_id, force } = params;
        return this._client.delete(`/accounts/${account_id}/workers/scripts/${scriptName}`, {
            query: { force },
            ...options,
            headers: { Accept: '*/*', ...options?.headers },
        });
    }
    /**
     * Fetch raw script content for your worker. Note this is the original script
     * content, not JSON encoded.
     */
    get(scriptName, params, options) {
        const { account_id } = params;
        return this._client.get(`/accounts/${account_id}/workers/scripts/${scriptName}`, {
            ...options,
            __binaryResponse: true,
        });
    }
}
export class ScriptsSinglePage extends SinglePage {
}
(function (Scripts) {
    Scripts.ScriptsSinglePage = ScriptsAPI.ScriptsSinglePage;
    Scripts.Schedules = SchedulesAPI.Schedules;
    Scripts.Tail = TailAPI.Tail;
    Scripts.Content = ContentAPI.Content;
    Scripts.Settings = SettingsAPI.Settings;
    Scripts.Deployments = DeploymentsAPI.Deployments;
    Scripts.Versions = VersionsAPI.Versions;
    Scripts.VersionListResponsesV4PagePagination = VersionsAPI.VersionListResponsesV4PagePagination;
})(Scripts || (Scripts = {}));
//# sourceMappingURL=scripts.mjs.map