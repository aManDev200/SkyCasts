import * as Core from "../../../core.js";
import { APIResource } from "../../../resource.js";
import { type Response } from "../../../_shims/index.js";
import * as ContentAPI from "./content.js";
import * as WorkersAPI from "../workers.js";
import * as ScriptsAPI from "./scripts.js";
import { type Uploadable } from "../../../core.js";
export declare class Content extends APIResource {
    /**
     * Put script content without touching config or metadata
     */
    update(scriptName: string, params: ContentUpdateParams, options?: Core.RequestOptions): Core.APIPromise<ScriptsAPI.Script>;
    /**
     * Fetch script content only
     */
    get(scriptName: string, params: ContentGetParams, options?: Core.RequestOptions): Core.APIPromise<Response>;
}
export interface ContentUpdateParams {
    /**
     * Path param: Identifier
     */
    account_id: string;
    /**
     * Body param: A module comprising a Worker script, often a javascript file.
     * Multiple modules may be provided as separate named parts, but at least one
     * module must be present. This should be referenced either in the metadata as
     * `main_module` (esm)/`body_part` (service worker) or as a header
     * `CF-WORKER-MAIN-MODULE-PART` (esm) /`CF-WORKER-BODY-PART` (service worker) by
     * part name. Source maps may also be included using the `application/source-map`
     * content type.
     */
    '<any part name>'?: Array<Uploadable>;
    /**
     * Body param: JSON encoded metadata about the uploaded parts and Worker
     * configuration.
     */
    metadata?: WorkersAPI.WorkerMetadataParam;
    /**
     * Header param: The multipart name of a script upload part containing script
     * content in service worker format. Alternative to including in a metadata part.
     */
    'CF-WORKER-BODY-PART'?: string;
    /**
     * Header param: The multipart name of a script upload part containing script
     * content in es module format. Alternative to including in a metadata part.
     */
    'CF-WORKER-MAIN-MODULE-PART'?: string;
}
export interface ContentGetParams {
    /**
     * Identifier
     */
    account_id: string;
}
export declare namespace Content {
    export import ContentUpdateParams = ContentAPI.ContentUpdateParams;
    export import ContentGetParams = ContentAPI.ContentGetParams;
}
//# sourceMappingURL=content.d.ts.map