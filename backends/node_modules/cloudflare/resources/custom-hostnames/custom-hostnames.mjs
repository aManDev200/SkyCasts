// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.
import { APIResource } from "../../resource.mjs";
import * as FallbackOriginAPI from "./fallback-origin.mjs";
import { V4PagePaginationArray } from "../../pagination.mjs";
export class CustomHostnames extends APIResource {
    constructor() {
        super(...arguments);
        this.fallbackOrigin = new FallbackOriginAPI.FallbackOrigin(this._client);
    }
    /**
     * Add a new custom hostname and request that an SSL certificate be issued for it.
     * One of three validation methods—http, txt, email—should be used, with 'http'
     * recommended if the CNAME is already in place (or will be soon). Specifying
     * 'email' will send an email to the WHOIS contacts on file for the base domain
     * plus hostmaster, postmaster, webmaster, admin, administrator. If http is used
     * and the domain is not already pointing to the Managed CNAME host, the PATCH
     * method must be used once it is (to complete validation).
     */
    create(params, options) {
        const { zone_id, ...body } = params;
        return this._client.post(`/zones/${zone_id}/custom_hostnames`, { body, ...options })._thenUnwrap((obj) => obj.result);
    }
    /**
     * List, search, sort, and filter all of your custom hostnames.
     */
    list(params, options) {
        const { zone_id, ...query } = params;
        return this._client.getAPIList(`/zones/${zone_id}/custom_hostnames`, CustomHostnameListResponsesV4PagePaginationArray, { query, ...options });
    }
    /**
     * Delete Custom Hostname (and any issued SSL certificates)
     */
    delete(customHostnameId, params, options) {
        const { zone_id } = params;
        return this._client.delete(`/zones/${zone_id}/custom_hostnames/${customHostnameId}`, options);
    }
    /**
     * Modify SSL configuration for a custom hostname. When sent with SSL config that
     * matches existing config, used to indicate that hostname should pass domain
     * control validation (DCV). Can also be used to change validation type, e.g., from
     * 'http' to 'email'.
     */
    edit(customHostnameId, params, options) {
        const { zone_id, ...body } = params;
        return this._client.patch(`/zones/${zone_id}/custom_hostnames/${customHostnameId}`, {
            body,
            ...options,
        })._thenUnwrap((obj) => obj.result);
    }
    /**
     * Custom Hostname Details
     */
    get(customHostnameId, params, options) {
        const { zone_id } = params;
        return this._client.get(`/zones/${zone_id}/custom_hostnames/${customHostnameId}`, options)._thenUnwrap((obj) => obj.result);
    }
}
export class CustomHostnameListResponsesV4PagePaginationArray extends V4PagePaginationArray {
}
(function (CustomHostnames) {
    CustomHostnames.FallbackOrigin = FallbackOriginAPI.FallbackOrigin;
})(CustomHostnames || (CustomHostnames = {}));
//# sourceMappingURL=custom-hostnames.mjs.map