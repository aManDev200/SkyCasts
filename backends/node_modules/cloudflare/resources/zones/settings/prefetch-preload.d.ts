import * as Core from "../../../core.js";
import { APIResource } from "../../../resource.js";
import * as PrefetchPreloadAPI from "./prefetch-preload.js";
export declare class PrefetchPreloadResource extends APIResource {
    /**
     * Cloudflare will prefetch any URLs that are included in the response headers.
     * This is limited to Enterprise Zones.
     */
    edit(params: PrefetchPreloadEditParams, options?: Core.RequestOptions): Core.APIPromise<PrefetchPreload>;
    /**
     * Cloudflare will prefetch any URLs that are included in the response headers.
     * This is limited to Enterprise Zones.
     */
    get(params: PrefetchPreloadGetParams, options?: Core.RequestOptions): Core.APIPromise<PrefetchPreload>;
}
/**
 * Cloudflare will prefetch any URLs that are included in the response headers.
 * This is limited to Enterprise Zones.
 */
export interface PrefetchPreload {
    /**
     * ID of the zone setting.
     */
    id: 'prefetch_preload';
    /**
     * Current value of the zone setting.
     */
    value: 'on' | 'off';
    /**
     * Whether or not this setting can be modified for this zone (based on your
     * Cloudflare plan level).
     */
    editable?: true | false;
    /**
     * last time this setting was modified.
     */
    modified_on?: string | null;
}
export interface PrefetchPreloadEditParams {
    /**
     * Path param: Identifier
     */
    zone_id: string;
    /**
     * Body param: Value of the zone setting.
     */
    value: 'on' | 'off';
}
export interface PrefetchPreloadGetParams {
    /**
     * Identifier
     */
    zone_id: string;
}
export declare namespace PrefetchPreloadResource {
    export import PrefetchPreload = PrefetchPreloadAPI.PrefetchPreload;
    export import PrefetchPreloadEditParams = PrefetchPreloadAPI.PrefetchPreloadEditParams;
    export import PrefetchPreloadGetParams = PrefetchPreloadAPI.PrefetchPreloadGetParams;
}
//# sourceMappingURL=prefetch-preload.d.ts.map