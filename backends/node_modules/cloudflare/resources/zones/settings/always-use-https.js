"use strict";
// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AlwaysUseHTTPS = void 0;
const resource_1 = require("../../../resource.js");
const AlwaysUseHTTPSAPI = __importStar(require("./always-use-https.js"));
class AlwaysUseHTTPS extends resource_1.APIResource {
    /**
     * Reply to all requests for URLs that use "http" with a 301 redirect to the
     * equivalent "https" URL. If you only want to redirect for a subset of requests,
     * consider creating an "Always use HTTPS" page rule.
     */
    edit(params, options) {
        const { zone_id, ...body } = params;
        return this._client.patch(`/zones/${zone_id}/settings/always_use_https`, {
            body,
            ...options,
        })._thenUnwrap((obj) => obj.result);
    }
    /**
     * Reply to all requests for URLs that use "http" with a 301 redirect to the
     * equivalent "https" URL. If you only want to redirect for a subset of requests,
     * consider creating an "Always use HTTPS" page rule.
     */
    get(params, options) {
        const { zone_id } = params;
        return this._client.get(`/zones/${zone_id}/settings/always_use_https`, options)._thenUnwrap((obj) => obj.result);
    }
}
exports.AlwaysUseHTTPS = AlwaysUseHTTPS;
(function (AlwaysUseHTTPS) {
    AlwaysUseHTTPS.AlwaysUseHTTPS = AlwaysUseHTTPSAPI.AlwaysUseHTTPS;
})(AlwaysUseHTTPS = exports.AlwaysUseHTTPS || (exports.AlwaysUseHTTPS = {}));
//# sourceMappingURL=always-use-https.js.map