"use strict";
// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Settings = void 0;
const resource_1 = require("../../../resource.js");
const AdvancedDDoSAPI = __importStar(require("./advanced-ddos.js"));
const AlwaysOnlineAPI = __importStar(require("./always-online.js"));
const AlwaysUseHTTPSAPI = __importStar(require("./always-use-https.js"));
const AutomaticHTTPSRewritesAPI = __importStar(require("./automatic-https-rewrites.js"));
const AutomaticPlatformOptimizationAPI = __importStar(require("./automatic-platform-optimization.js"));
const BrotliAPI = __importStar(require("./brotli.js"));
const BrowserCacheTTLAPI = __importStar(require("./browser-cache-ttl.js"));
const BrowserCheckAPI = __importStar(require("./browser-check.js"));
const CacheLevelAPI = __importStar(require("./cache-level.js"));
const ChallengeTTLAPI = __importStar(require("./challenge-ttl.js"));
const CiphersAPI = __importStar(require("./ciphers.js"));
const DevelopmentModeAPI = __importStar(require("./development-mode.js"));
const EarlyHintsAPI = __importStar(require("./early-hints.js"));
const EmailObfuscationAPI = __importStar(require("./email-obfuscation.js"));
const FontSettingsAPI = __importStar(require("./font-settings.js"));
const H2PrioritizationAPI = __importStar(require("./h2-prioritization.js"));
const HotlinkProtectionAPI = __importStar(require("./hotlink-protection.js"));
const HTTP2API = __importStar(require("./http2.js"));
const HTTP3API = __importStar(require("./http3.js"));
const ImageResizingAPI = __importStar(require("./image-resizing.js"));
const IPGeolocationAPI = __importStar(require("./ip-geolocation.js"));
const IPV6API = __importStar(require("./ipv6.js"));
const MinTLSVersionAPI = __importStar(require("./min-tls-version.js"));
const MinifyAPI = __importStar(require("./minify.js"));
const MirageAPI = __importStar(require("./mirage.js"));
const MobileRedirectAPI = __importStar(require("./mobile-redirect.js"));
const NELAPI = __importStar(require("./nel.js"));
const OpportunisticEncryptionAPI = __importStar(require("./opportunistic-encryption.js"));
const OpportunisticOnionAPI = __importStar(require("./opportunistic-onion.js"));
const OrangeToOrangeAPI = __importStar(require("./orange-to-orange.js"));
const OriginErrorPagePassThruAPI = __importStar(require("./origin-error-page-pass-thru.js"));
const OriginMaxHTTPVersionAPI = __importStar(require("./origin-max-http-version.js"));
const PolishAPI = __importStar(require("./polish.js"));
const PrefetchPreloadAPI = __importStar(require("./prefetch-preload.js"));
const ProxyReadTimeoutAPI = __importStar(require("./proxy-read-timeout.js"));
const PseudoIPV4API = __importStar(require("./pseudo-ipv4.js"));
const ResponseBufferingAPI = __importStar(require("./response-buffering.js"));
const RocketLoaderAPI = __importStar(require("./rocket-loader.js"));
const SecurityHeadersAPI = __importStar(require("./security-headers.js"));
const SecurityLevelAPI = __importStar(require("./security-level.js"));
const ServerSideExcludesAPI = __importStar(require("./server-side-excludes.js"));
const SortQueryStringForCacheAPI = __importStar(require("./sort-query-string-for-cache.js"));
const SSLAPI = __importStar(require("./ssl.js"));
const SSLRecommenderAPI = __importStar(require("./ssl-recommender.js"));
const TLS1_3API = __importStar(require("./tls-1-3.js"));
const TLSClientAuthAPI = __importStar(require("./tls-client-auth.js"));
const TrueClientIPHeaderAPI = __importStar(require("./true-client-ip-header.js"));
const WAFAPI = __importStar(require("./waf.js"));
const WebPAPI = __importStar(require("./webp.js"));
const WebsocketAPI = __importStar(require("./websocket.js"));
const ZeroRTTAPI = __importStar(require("./zero-rtt.js"));
class Settings extends resource_1.APIResource {
    constructor() {
        super(...arguments);
        this.zeroRTT = new ZeroRTTAPI.ZeroRTTResource(this._client);
        this.advancedDDoS = new AdvancedDDoSAPI.AdvancedDDoS(this._client);
        this.alwaysOnline = new AlwaysOnlineAPI.AlwaysOnlineResource(this._client);
        this.alwaysUseHTTPS = new AlwaysUseHTTPSAPI.AlwaysUseHTTPS(this._client);
        this.automaticHTTPSRewrites = new AutomaticHTTPSRewritesAPI.AutomaticHTTPSRewrites(this._client);
        this.automaticPlatformOptimization = new AutomaticPlatformOptimizationAPI.AutomaticPlatformOptimizationResource(this._client);
        this.brotli = new BrotliAPI.BrotliResource(this._client);
        this.browserCacheTTL = new BrowserCacheTTLAPI.BrowserCacheTTLResource(this._client);
        this.browserCheck = new BrowserCheckAPI.BrowserCheckResource(this._client);
        this.cacheLevel = new CacheLevelAPI.CacheLevelResource(this._client);
        this.challengeTTL = new ChallengeTTLAPI.ChallengeTTLResource(this._client);
        this.ciphers = new CiphersAPI.Ciphers(this._client);
        this.developmentMode = new DevelopmentModeAPI.DevelopmentModeResource(this._client);
        this.earlyHints = new EarlyHintsAPI.EarlyHints(this._client);
        this.emailObfuscation = new EmailObfuscationAPI.EmailObfuscationResource(this._client);
        this.h2Prioritization = new H2PrioritizationAPI.H2PrioritizationResource(this._client);
        this.hotlinkProtection = new HotlinkProtectionAPI.HotlinkProtectionResource(this._client);
        this.http2 = new HTTP2API.HTTP2Resource(this._client);
        this.http3 = new HTTP3API.HTTP3Resource(this._client);
        this.imageResizing = new ImageResizingAPI.ImageResizingResource(this._client);
        this.ipGeolocation = new IPGeolocationAPI.IPGeolocationResource(this._client);
        this.ipv6 = new IPV6API.IPV6Resource(this._client);
        this.minTLSVersion = new MinTLSVersionAPI.MinTLSVersionResource(this._client);
        this.minify = new MinifyAPI.MinifyResource(this._client);
        this.mirage = new MirageAPI.MirageResource(this._client);
        this.mobileRedirect = new MobileRedirectAPI.MobileRedirectResource(this._client);
        this.nel = new NELAPI.NELResource(this._client);
        this.opportunisticEncryption = new OpportunisticEncryptionAPI.OpportunisticEncryptionResource(this._client);
        this.opportunisticOnion = new OpportunisticOnionAPI.OpportunisticOnionResource(this._client);
        this.orangeToOrange = new OrangeToOrangeAPI.OrangeToOrangeResource(this._client);
        this.originErrorPagePassThru = new OriginErrorPagePassThruAPI.OriginErrorPagePassThruResource(this._client);
        this.originMaxHTTPVersion = new OriginMaxHTTPVersionAPI.OriginMaxHTTPVersionResource(this._client);
        this.polish = new PolishAPI.PolishResource(this._client);
        this.prefetchPreload = new PrefetchPreloadAPI.PrefetchPreloadResource(this._client);
        this.proxyReadTimeout = new ProxyReadTimeoutAPI.ProxyReadTimeoutResource(this._client);
        this.pseudoIPV4 = new PseudoIPV4API.PseudoIPV4Resource(this._client);
        this.responseBuffering = new ResponseBufferingAPI.ResponseBufferingResource(this._client);
        this.rocketLoader = new RocketLoaderAPI.RocketLoaderResource(this._client);
        this.securityHeaders = new SecurityHeadersAPI.SecurityHeaders(this._client);
        this.securityLevel = new SecurityLevelAPI.SecurityLevelResource(this._client);
        this.serverSideExcludes = new ServerSideExcludesAPI.ServerSideExcludes(this._client);
        this.sortQueryStringForCache = new SortQueryStringForCacheAPI.SortQueryStringForCacheResource(this._client);
        this.ssl = new SSLAPI.SSLResource(this._client);
        this.sslRecommender = new SSLRecommenderAPI.SSLRecommenderResource(this._client);
        this.tls1_3 = new TLS1_3API.TLS1_3Resource(this._client);
        this.tlsClientAuth = new TLSClientAuthAPI.TLSClientAuthResource(this._client);
        this.trueClientIPHeader = new TrueClientIPHeaderAPI.TrueClientIPHeaderResource(this._client);
        this.waf = new WAFAPI.WAFResource(this._client);
        this.WebP = new WebPAPI.WebPResource(this._client);
        this.websocket = new WebsocketAPI.WebsocketResource(this._client);
        this.fontSettings = new FontSettingsAPI.FontSettings(this._client);
    }
}
exports.Settings = Settings;
(function (Settings) {
    Settings.ZeroRTTResource = ZeroRTTAPI.ZeroRTTResource;
    Settings.AdvancedDDoS = AdvancedDDoSAPI.AdvancedDDoS;
    Settings.AlwaysOnlineResource = AlwaysOnlineAPI.AlwaysOnlineResource;
    Settings.AlwaysUseHTTPS = AlwaysUseHTTPSAPI.AlwaysUseHTTPS;
    Settings.AutomaticHTTPSRewrites = AutomaticHTTPSRewritesAPI.AutomaticHTTPSRewrites;
    Settings.AutomaticPlatformOptimizationResource = AutomaticPlatformOptimizationAPI.AutomaticPlatformOptimizationResource;
    Settings.BrotliResource = BrotliAPI.BrotliResource;
    Settings.BrowserCacheTTLResource = BrowserCacheTTLAPI.BrowserCacheTTLResource;
    Settings.BrowserCheckResource = BrowserCheckAPI.BrowserCheckResource;
    Settings.CacheLevelResource = CacheLevelAPI.CacheLevelResource;
    Settings.ChallengeTTLResource = ChallengeTTLAPI.ChallengeTTLResource;
    Settings.Ciphers = CiphersAPI.Ciphers;
    Settings.DevelopmentModeResource = DevelopmentModeAPI.DevelopmentModeResource;
    Settings.EarlyHints = EarlyHintsAPI.EarlyHints;
    Settings.EmailObfuscationResource = EmailObfuscationAPI.EmailObfuscationResource;
    Settings.H2PrioritizationResource = H2PrioritizationAPI.H2PrioritizationResource;
    Settings.HotlinkProtectionResource = HotlinkProtectionAPI.HotlinkProtectionResource;
    Settings.HTTP2Resource = HTTP2API.HTTP2Resource;
    Settings.HTTP3Resource = HTTP3API.HTTP3Resource;
    Settings.ImageResizingResource = ImageResizingAPI.ImageResizingResource;
    Settings.IPGeolocationResource = IPGeolocationAPI.IPGeolocationResource;
    Settings.IPV6Resource = IPV6API.IPV6Resource;
    Settings.MinTLSVersionResource = MinTLSVersionAPI.MinTLSVersionResource;
    Settings.MinifyResource = MinifyAPI.MinifyResource;
    Settings.MirageResource = MirageAPI.MirageResource;
    Settings.MobileRedirectResource = MobileRedirectAPI.MobileRedirectResource;
    Settings.NELResource = NELAPI.NELResource;
    Settings.OpportunisticEncryptionResource = OpportunisticEncryptionAPI.OpportunisticEncryptionResource;
    Settings.OpportunisticOnionResource = OpportunisticOnionAPI.OpportunisticOnionResource;
    Settings.OrangeToOrangeResource = OrangeToOrangeAPI.OrangeToOrangeResource;
    Settings.OriginErrorPagePassThruResource = OriginErrorPagePassThruAPI.OriginErrorPagePassThruResource;
    Settings.OriginMaxHTTPVersionResource = OriginMaxHTTPVersionAPI.OriginMaxHTTPVersionResource;
    Settings.PolishResource = PolishAPI.PolishResource;
    Settings.PrefetchPreloadResource = PrefetchPreloadAPI.PrefetchPreloadResource;
    Settings.ProxyReadTimeoutResource = ProxyReadTimeoutAPI.ProxyReadTimeoutResource;
    Settings.PseudoIPV4Resource = PseudoIPV4API.PseudoIPV4Resource;
    Settings.ResponseBufferingResource = ResponseBufferingAPI.ResponseBufferingResource;
    Settings.RocketLoaderResource = RocketLoaderAPI.RocketLoaderResource;
    Settings.SecurityHeaders = SecurityHeadersAPI.SecurityHeaders;
    Settings.SecurityLevelResource = SecurityLevelAPI.SecurityLevelResource;
    Settings.ServerSideExcludes = ServerSideExcludesAPI.ServerSideExcludes;
    Settings.SortQueryStringForCacheResource = SortQueryStringForCacheAPI.SortQueryStringForCacheResource;
    Settings.SSLResource = SSLAPI.SSLResource;
    Settings.SSLRecommenderResource = SSLRecommenderAPI.SSLRecommenderResource;
    Settings.TLS1_3Resource = TLS1_3API.TLS1_3Resource;
    Settings.TLSClientAuthResource = TLSClientAuthAPI.TLSClientAuthResource;
    Settings.TrueClientIPHeaderResource = TrueClientIPHeaderAPI.TrueClientIPHeaderResource;
    Settings.WAFResource = WAFAPI.WAFResource;
    Settings.WebPResource = WebPAPI.WebPResource;
    Settings.WebsocketResource = WebsocketAPI.WebsocketResource;
    Settings.FontSettings = FontSettingsAPI.FontSettings;
})(Settings = exports.Settings || (exports.Settings = {}));
//# sourceMappingURL=settings.js.map