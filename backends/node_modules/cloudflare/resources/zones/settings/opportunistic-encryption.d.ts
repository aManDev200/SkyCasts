import * as Core from "../../../core.js";
import { APIResource } from "../../../resource.js";
import * as OpportunisticEncryptionAPI from "./opportunistic-encryption.js";
export declare class OpportunisticEncryptionResource extends APIResource {
    /**
     * Changes Opportunistic Encryption setting.
     */
    edit(params: OpportunisticEncryptionEditParams, options?: Core.RequestOptions): Core.APIPromise<OpportunisticEncryption>;
    /**
     * Gets Opportunistic Encryption setting.
     */
    get(params: OpportunisticEncryptionGetParams, options?: Core.RequestOptions): Core.APIPromise<OpportunisticEncryption>;
}
/**
 * Enables the Opportunistic Encryption feature for a zone.
 */
export interface OpportunisticEncryption {
    /**
     * ID of the zone setting.
     */
    id: 'opportunistic_encryption';
    /**
     * Current value of the zone setting.
     */
    value: 'on' | 'off';
    /**
     * Whether or not this setting can be modified for this zone (based on your
     * Cloudflare plan level).
     */
    editable?: true | false;
    /**
     * last time this setting was modified.
     */
    modified_on?: string | null;
}
export interface OpportunisticEncryptionEditParams {
    /**
     * Path param: Identifier
     */
    zone_id: string;
    /**
     * Body param: Value of the zone setting. Notes: Default value depends on the
     * zone's plan level.
     */
    value: 'on' | 'off';
}
export interface OpportunisticEncryptionGetParams {
    /**
     * Identifier
     */
    zone_id: string;
}
export declare namespace OpportunisticEncryptionResource {
    export import OpportunisticEncryption = OpportunisticEncryptionAPI.OpportunisticEncryption;
    export import OpportunisticEncryptionEditParams = OpportunisticEncryptionAPI.OpportunisticEncryptionEditParams;
    export import OpportunisticEncryptionGetParams = OpportunisticEncryptionAPI.OpportunisticEncryptionGetParams;
}
//# sourceMappingURL=opportunistic-encryption.d.ts.map