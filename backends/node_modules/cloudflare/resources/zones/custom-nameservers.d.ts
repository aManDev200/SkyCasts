import * as Core from "../../core.js";
import { APIResource } from "../../resource.js";
import * as CustomNameserversAPI from "./custom-nameservers.js";
export declare class CustomNameservers extends APIResource {
    /**
     * Set metadata for account-level custom nameservers on a zone.
     *
     * If you would like new zones in the account to use account custom nameservers by
     * default, use PUT /accounts/:identifier to set the account setting
     * use_account_custom_ns_by_default to true.
     */
    update(params: CustomNameserverUpdateParams, options?: Core.RequestOptions): Core.APIPromise<CustomNameserverUpdateResponse | null>;
    /**
     * Get metadata for account-level custom nameservers on a zone.
     */
    get(params: CustomNameserverGetParams, options?: Core.RequestOptions): Core.APIPromise<CustomNameserverGetResponse | null>;
}
export type CustomNameserverUpdateResponse = Array<unknown>;
export type CustomNameserverGetResponse = Array<unknown>;
export interface CustomNameserverUpdateParams {
    /**
     * Path param: Identifier
     */
    zone_id: string;
    /**
     * Body param: Whether zone uses account-level custom nameservers.
     */
    enabled?: boolean;
    /**
     * Body param: The number of the name server set to assign to the zone.
     */
    ns_set?: number;
}
export interface CustomNameserverGetParams {
    /**
     * Identifier
     */
    zone_id: string;
}
export declare namespace CustomNameservers {
    export import CustomNameserverUpdateResponse = CustomNameserversAPI.CustomNameserverUpdateResponse;
    export import CustomNameserverGetResponse = CustomNameserversAPI.CustomNameserverGetResponse;
    export import CustomNameserverUpdateParams = CustomNameserversAPI.CustomNameserverUpdateParams;
    export import CustomNameserverGetParams = CustomNameserversAPI.CustomNameserverGetParams;
}
//# sourceMappingURL=custom-nameservers.d.ts.map