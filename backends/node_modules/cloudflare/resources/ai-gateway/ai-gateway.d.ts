import * as Core from "../../core.js";
import { APIResource } from "../../resource.js";
import * as LogsAPI from "./logs.js";
import { V4PagePaginationArray, type V4PagePaginationArrayParams } from "../../pagination.js";
export declare class AIGateway extends APIResource {
    logs: LogsAPI.Logs;
    /**
     * Create a new Gateway
     */
    create(params: AIGatewayCreateParams, options?: Core.RequestOptions): Core.APIPromise<AIGatewayCreateResponse>;
    /**
     * Update a Gateway
     */
    update(id: string, params: AIGatewayUpdateParams, options?: Core.RequestOptions): Core.APIPromise<AIGatewayUpdateResponse>;
    /**
     * List Gateway's
     */
    list(params: AIGatewayListParams, options?: Core.RequestOptions): Core.PagePromise<AIGatewayListResponsesV4PagePaginationArray, AIGatewayListResponse>;
    /**
     * Delete a Gateway
     */
    delete(id: string, params: AIGatewayDeleteParams, options?: Core.RequestOptions): Core.APIPromise<AIGatewayDeleteResponse>;
    /**
     * Fetch a Gateway
     */
    get(id: string, params: AIGatewayGetParams, options?: Core.RequestOptions): Core.APIPromise<AIGatewayGetResponse>;
}
export declare class AIGatewayListResponsesV4PagePaginationArray extends V4PagePaginationArray<AIGatewayListResponse> {
}
export interface AIGatewayCreateResponse {
    task: AIGatewayCreateResponse.Task;
}
export declare namespace AIGatewayCreateResponse {
    interface Task {
        /**
         * gateway id
         */
        id: string;
        cache_invalidate_on_update: boolean;
        cache_ttl: number | null;
        collect_logs: boolean;
        created_at: string;
        modified_at: string;
        rate_limiting_interval: number | null;
        rate_limiting_limit: number | null;
        rate_limiting_technique: 'fixed' | 'sliding';
    }
}
export interface AIGatewayUpdateResponse {
    /**
     * gateway id
     */
    id: string;
    cache_invalidate_on_update: boolean;
    cache_ttl: number | null;
    collect_logs: boolean;
    created_at: string;
    modified_at: string;
    rate_limiting_interval: number | null;
    rate_limiting_limit: number | null;
    rate_limiting_technique: 'fixed' | 'sliding';
}
export interface AIGatewayListResponse {
    /**
     * gateway id
     */
    id: string;
    cache_invalidate_on_update: boolean;
    cache_ttl: number | null;
    collect_logs: boolean;
    created_at: string;
    modified_at: string;
    rate_limiting_interval: number | null;
    rate_limiting_limit: number | null;
    rate_limiting_technique: 'fixed' | 'sliding';
}
export interface AIGatewayDeleteResponse {
    /**
     * gateway id
     */
    id: string;
    cache_invalidate_on_update: boolean;
    cache_ttl: number | null;
    collect_logs: boolean;
    created_at: string;
    modified_at: string;
    rate_limiting_interval: number | null;
    rate_limiting_limit: number | null;
    rate_limiting_technique: 'fixed' | 'sliding';
}
export interface AIGatewayGetResponse {
    /**
     * gateway id
     */
    id: string;
    cache_invalidate_on_update: boolean;
    cache_ttl: number | null;
    collect_logs: boolean;
    created_at: string;
    modified_at: string;
    rate_limiting_interval: number | null;
    rate_limiting_limit: number | null;
    rate_limiting_technique: 'fixed' | 'sliding';
}
export interface AIGatewayCreateParams {
    /**
     * Path param:
     */
    account_id: string;
    /**
     * Body param: gateway id
     */
    id: string;
    /**
     * Body param:
     */
    cache_invalidate_on_update: boolean;
    /**
     * Body param:
     */
    cache_ttl: number | null;
    /**
     * Body param:
     */
    collect_logs: boolean;
    /**
     * Body param:
     */
    rate_limiting_interval: number | null;
    /**
     * Body param:
     */
    rate_limiting_limit: number | null;
    /**
     * Body param:
     */
    rate_limiting_technique: 'fixed' | 'sliding';
}
export interface AIGatewayUpdateParams {
    /**
     * Path param:
     */
    account_id: string;
    /**
     * Body param:
     */
    cache_invalidate_on_update: boolean;
    /**
     * Body param:
     */
    cache_ttl: number | null;
    /**
     * Body param:
     */
    collect_logs: boolean;
    /**
     * Body param:
     */
    rate_limiting_interval: number | null;
    /**
     * Body param:
     */
    rate_limiting_limit: number | null;
    /**
     * Body param:
     */
    rate_limiting_technique: 'fixed' | 'sliding';
}
export interface AIGatewayListParams extends V4PagePaginationArrayParams {
    /**
     * Path param:
     */
    account_id: string;
    /**
     * Query param: gateway id
     */
    id?: string;
    /**
     * Query param: Order By Column Name
     */
    order_by?: string;
}
export interface AIGatewayDeleteParams {
    account_id: string;
}
export interface AIGatewayGetParams {
    account_id: string;
}
export declare namespace AIGateway {
    export import Logs = LogsAPI.Logs;
    export import LogGetResponse = LogsAPI.LogGetResponse;
    export import LogGetParams = LogsAPI.LogGetParams;
}
//# sourceMappingURL=ai-gateway.d.ts.map