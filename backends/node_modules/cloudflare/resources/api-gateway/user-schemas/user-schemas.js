"use strict";
// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PublicSchemasSinglePage = exports.UserSchemas = void 0;
const resource_1 = require("../../../resource.js");
const UserSchemasAPI = __importStar(require("./user-schemas.js"));
const OperationsAPI = __importStar(require("./operations.js"));
const core_1 = require("../../../core.js");
const pagination_1 = require("../../../pagination.js");
class UserSchemas extends resource_1.APIResource {
    constructor() {
        super(...arguments);
        this.operations = new OperationsAPI.Operations(this._client);
    }
    /**
     * Upload a schema to a zone
     */
    create(params, options) {
        const { zone_id, ...body } = params;
        return this._client.post(`/zones/${zone_id}/api_gateway/user_schemas`, (0, core_1.multipartFormRequestOptions)({ body, ...options }))._thenUnwrap((obj) => obj.result);
    }
    /**
     * Retrieve information about all schemas on a zone
     */
    list(params, options) {
        const { zone_id, ...query } = params;
        return this._client.getAPIList(`/zones/${zone_id}/api_gateway/user_schemas`, PublicSchemasSinglePage, {
            query,
            ...options,
        });
    }
    /**
     * Delete a schema
     */
    delete(schemaId, params, options) {
        const { zone_id } = params;
        return this._client.delete(`/zones/${zone_id}/api_gateway/user_schemas/${schemaId}`, options)._thenUnwrap((obj) => obj.result);
    }
    /**
     * Enable validation for a schema
     */
    edit(schemaId, params, options) {
        const { zone_id, ...body } = params;
        return this._client.patch(`/zones/${zone_id}/api_gateway/user_schemas/${schemaId}`, {
            body,
            ...options,
        })._thenUnwrap((obj) => obj.result);
    }
    /**
     * Retrieve information about a specific schema on a zone
     */
    get(schemaId, params, options) {
        const { zone_id, ...query } = params;
        return this._client.get(`/zones/${zone_id}/api_gateway/user_schemas/${schemaId}`, {
            query,
            ...options,
        })._thenUnwrap((obj) => obj.result);
    }
}
exports.UserSchemas = UserSchemas;
class PublicSchemasSinglePage extends pagination_1.SinglePage {
}
exports.PublicSchemasSinglePage = PublicSchemasSinglePage;
(function (UserSchemas) {
    UserSchemas.PublicSchemasSinglePage = UserSchemasAPI.PublicSchemasSinglePage;
    UserSchemas.Operations = OperationsAPI.Operations;
    UserSchemas.OperationListResponsesSinglePage = OperationsAPI.OperationListResponsesSinglePage;
})(UserSchemas = exports.UserSchemas || (exports.UserSchemas = {}));
//# sourceMappingURL=user-schemas.js.map