import * as Core from "../../../core.js";
import { APIResource } from "../../../resource.js";
import * as SchemaValidationAPI from "./schema-validation.js";
export declare class SchemaValidation extends APIResource {
    /**
     * Updates operation-level schema validation settings on the zone
     */
    update(operationId: string, params: SchemaValidationUpdateParams, options?: Core.RequestOptions): Core.APIPromise<SchemaValidationUpdateResponse>;
    /**
     * Updates multiple operation-level schema validation settings on the zone
     */
    edit(params: SchemaValidationEditParams, options?: Core.RequestOptions): Core.APIPromise<SettingsMultipleRequest>;
    /**
     * Retrieves operation-level schema validation settings on the zone
     */
    get(operationId: string, params: SchemaValidationGetParams, options?: Core.RequestOptions): Core.APIPromise<SchemaValidationGetResponse>;
}
export type SettingsMultipleRequest = Record<string, SettingsMultipleRequest.api_shield_operation_schema_validation_settings_multiple_request_entry>;
export declare namespace SettingsMultipleRequest {
    /**
     * Operation ID to mitigation action mappings
     */
    interface api_shield_operation_schema_validation_settings_multiple_request_entry {
        /**
         * When set, this applies a mitigation action to this operation
         *
         * - `log` log request when request does not conform to schema for this operation
         * - `block` deny access to the site when request does not conform to schema for
         *   this operation
         * - `none` will skip mitigation for this operation
         * - `null` indicates that no operation level mitigation is in place, see Zone
         *   Level Schema Validation Settings for mitigation action that will be applied
         */
        mitigation_action?: 'log' | 'block' | 'none' | null;
    }
}
export type SettingsMultipleRequestParam = Record<string, SettingsMultipleRequestParam.api_shield_operation_schema_validation_settings_multiple_request_entry>;
export declare namespace SettingsMultipleRequestParam {
    /**
     * Operation ID to mitigation action mappings
     */
    interface api_shield_operation_schema_validation_settings_multiple_request_entry {
        /**
         * When set, this applies a mitigation action to this operation
         *
         * - `log` log request when request does not conform to schema for this operation
         * - `block` deny access to the site when request does not conform to schema for
         *   this operation
         * - `none` will skip mitigation for this operation
         * - `null` indicates that no operation level mitigation is in place, see Zone
         *   Level Schema Validation Settings for mitigation action that will be applied
         */
        mitigation_action?: 'log' | 'block' | 'none' | null;
    }
}
export interface SchemaValidationUpdateResponse {
    /**
     * When set, this applies a mitigation action to this operation
     *
     * - `log` log request when request does not conform to schema for this operation
     * - `block` deny access to the site when request does not conform to schema for
     *   this operation
     * - `none` will skip mitigation for this operation
     * - `null` indicates that no operation level mitigation is in place, see Zone
     *   Level Schema Validation Settings for mitigation action that will be applied
     */
    mitigation_action?: 'log' | 'block' | 'none' | null;
}
export interface SchemaValidationGetResponse {
    /**
     * When set, this applies a mitigation action to this operation
     *
     * - `log` log request when request does not conform to schema for this operation
     * - `block` deny access to the site when request does not conform to schema for
     *   this operation
     * - `none` will skip mitigation for this operation
     * - `null` indicates that no operation level mitigation is in place, see Zone
     *   Level Schema Validation Settings for mitigation action that will be applied
     */
    mitigation_action?: 'log' | 'block' | 'none' | null;
}
export interface SchemaValidationUpdateParams {
    /**
     * Path param: Identifier
     */
    zone_id: string;
    /**
     * Body param: When set, this applies a mitigation action to this operation
     *
     * - `log` log request when request does not conform to schema for this operation
     * - `block` deny access to the site when request does not conform to schema for
     *   this operation
     * - `none` will skip mitigation for this operation
     * - `null` indicates that no operation level mitigation is in place, see Zone
     *   Level Schema Validation Settings for mitigation action that will be applied
     */
    mitigation_action?: 'log' | 'block' | 'none' | null;
}
export interface SchemaValidationEditParams {
    /**
     * Path param: Identifier
     */
    zone_id: string;
    /**
     * Body param:
     */
    settings_multiple_request: SettingsMultipleRequestParam;
}
export interface SchemaValidationGetParams {
    /**
     * Identifier
     */
    zone_id: string;
}
export declare namespace SchemaValidation {
    export import SettingsMultipleRequest = SchemaValidationAPI.SettingsMultipleRequest;
    export import SchemaValidationUpdateResponse = SchemaValidationAPI.SchemaValidationUpdateResponse;
    export import SchemaValidationGetResponse = SchemaValidationAPI.SchemaValidationGetResponse;
    export import SchemaValidationUpdateParams = SchemaValidationAPI.SchemaValidationUpdateParams;
    export import SchemaValidationEditParams = SchemaValidationAPI.SchemaValidationEditParams;
    export import SchemaValidationGetParams = SchemaValidationAPI.SchemaValidationGetParams;
}
//# sourceMappingURL=schema-validation.d.ts.map