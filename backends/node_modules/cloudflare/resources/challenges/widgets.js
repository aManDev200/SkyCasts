"use strict";
// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.WidgetListResponsesV4PagePaginationArray = exports.Widgets = void 0;
const resource_1 = require("../../resource.js");
const WidgetsAPI = __importStar(require("./widgets.js"));
const pagination_1 = require("../../pagination.js");
class Widgets extends resource_1.APIResource {
    /**
     * Lists challenge widgets.
     */
    create(params, options) {
        const { account_id, direction, order, page, per_page, ...body } = params;
        return this._client.post(`/accounts/${account_id}/challenges/widgets`, {
            query: { direction, order, page, per_page },
            body,
            ...options,
        })._thenUnwrap((obj) => obj.result);
    }
    /**
     * Update the configuration of a widget.
     */
    update(sitekey, params, options) {
        const { account_id, ...body } = params;
        return this._client.put(`/accounts/${account_id}/challenges/widgets/${sitekey}`, {
            body,
            ...options,
        })._thenUnwrap((obj) => obj.result);
    }
    /**
     * Lists all turnstile widgets of an account.
     */
    list(params, options) {
        const { account_id, ...query } = params;
        return this._client.getAPIList(`/accounts/${account_id}/challenges/widgets`, WidgetListResponsesV4PagePaginationArray, { query, ...options });
    }
    /**
     * Destroy a Turnstile Widget.
     */
    delete(sitekey, params, options) {
        const { account_id } = params;
        return this._client.delete(`/accounts/${account_id}/challenges/widgets/${sitekey}`, options)._thenUnwrap((obj) => obj.result);
    }
    /**
     * Show a single challenge widget configuration.
     */
    get(sitekey, params, options) {
        const { account_id } = params;
        return this._client.get(`/accounts/${account_id}/challenges/widgets/${sitekey}`, options)._thenUnwrap((obj) => obj.result);
    }
    /**
     * Generate a new secret key for this widget. If `invalidate_immediately` is set to
     * `false`, the previous secret remains valid for 2 hours.
     *
     * Note that secrets cannot be rotated again during the grace period.
     */
    rotateSecret(sitekey, params, options) {
        const { account_id, ...body } = params;
        return this._client.post(`/accounts/${account_id}/challenges/widgets/${sitekey}/rotate_secret`, {
            body,
            ...options,
        })._thenUnwrap((obj) => obj.result);
    }
}
exports.Widgets = Widgets;
class WidgetListResponsesV4PagePaginationArray extends pagination_1.V4PagePaginationArray {
}
exports.WidgetListResponsesV4PagePaginationArray = WidgetListResponsesV4PagePaginationArray;
(function (Widgets) {
    Widgets.WidgetListResponsesV4PagePaginationArray = WidgetsAPI.WidgetListResponsesV4PagePaginationArray;
})(Widgets = exports.Widgets || (exports.Widgets = {}));
//# sourceMappingURL=widgets.js.map