import * as Core from "../../../core.js";
import { APIResource } from "../../../resource.js";
import * as SummaryAPI from "./summary.js";
export declare class Summary extends APIResource {
    /**
     * Percentage distribution of bot-generated traffic to genuine human traffic, as
     * classified by Cloudflare. Visit
     * https://developers.cloudflare.com/radar/concepts/bot-classes/ for more
     * information.
     */
    botClass(query?: SummaryBotClassParams, options?: Core.RequestOptions): Core.APIPromise<SummaryBotClassResponse>;
    botClass(options?: Core.RequestOptions): Core.APIPromise<SummaryBotClassResponse>;
    /**
     * Percentage of Internet traffic generated by mobile, desktop, and other types of
     * devices, over a given time period.
     */
    deviceType(query?: SummaryDeviceTypeParams, options?: Core.RequestOptions): Core.APIPromise<SummaryDeviceTypeResponse>;
    deviceType(options?: Core.RequestOptions): Core.APIPromise<SummaryDeviceTypeResponse>;
    /**
     * Percentage distribution of traffic per HTTP protocol over a given time period.
     */
    httpProtocol(query?: SummaryHTTPProtocolParams, options?: Core.RequestOptions): Core.APIPromise<SummaryHTTPProtocolResponse>;
    httpProtocol(options?: Core.RequestOptions): Core.APIPromise<SummaryHTTPProtocolResponse>;
    /**
     * Percentage distribution of traffic per HTTP protocol version over a given time
     * period.
     */
    httpVersion(query?: SummaryHTTPVersionParams, options?: Core.RequestOptions): Core.APIPromise<SummaryHTTPVersionResponse>;
    httpVersion(options?: Core.RequestOptions): Core.APIPromise<SummaryHTTPVersionResponse>;
    /**
     * Percentage distribution of Internet traffic based on IP protocol versions, such
     * as IPv4 and IPv6, over a given time period.
     */
    ipVersion(query?: SummaryIPVersionParams, options?: Core.RequestOptions): Core.APIPromise<SummaryIPVersionResponse>;
    ipVersion(options?: Core.RequestOptions): Core.APIPromise<SummaryIPVersionResponse>;
    /**
     * Percentage distribution of Internet traffic generated by different operating
     * systems like Windows, macOS, Android, iOS, and others, over a given time period.
     */
    os(query?: SummaryOSParams, options?: Core.RequestOptions): Core.APIPromise<SummaryOSResponse>;
    os(options?: Core.RequestOptions): Core.APIPromise<SummaryOSResponse>;
    /**
     * Percentage distribution of traffic per Post Quantum support over a given time
     * period.
     */
    postQuantum(query?: SummaryPostQuantumParams, options?: Core.RequestOptions): Core.APIPromise<SummaryPostQuantumResponse>;
    postQuantum(options?: Core.RequestOptions): Core.APIPromise<SummaryPostQuantumResponse>;
    /**
     * Percentage distribution of traffic per TLS protocol version, over a given time
     * period.
     */
    tlsVersion(query?: SummaryTLSVersionParams, options?: Core.RequestOptions): Core.APIPromise<SummaryTLSVersionResponse>;
    tlsVersion(options?: Core.RequestOptions): Core.APIPromise<SummaryTLSVersionResponse>;
}
export interface SummaryBotClassResponse {
    meta: SummaryBotClassResponse.Meta;
    summary_0: SummaryBotClassResponse.Summary0;
}
export declare namespace SummaryBotClassResponse {
    interface Meta {
        dateRange: Array<Meta.DateRange>;
        lastUpdated: string;
        normalization: string;
        confidenceInfo?: Meta.ConfidenceInfo;
    }
    namespace Meta {
        interface DateRange {
            /**
             * Adjusted end of date range.
             */
            endTime: string;
            /**
             * Adjusted start of date range.
             */
            startTime: string;
        }
        interface ConfidenceInfo {
            annotations?: Array<ConfidenceInfo.Annotation>;
            level?: number;
        }
        namespace ConfidenceInfo {
            interface Annotation {
                dataSource: string;
                description: string;
                eventType: string;
                isInstantaneous: boolean;
                endTime?: string;
                linkedUrl?: string;
                startTime?: string;
            }
        }
    }
    interface Summary0 {
        bot: string;
        human: string;
    }
}
export interface SummaryDeviceTypeResponse {
    meta: SummaryDeviceTypeResponse.Meta;
    summary_0: SummaryDeviceTypeResponse.Summary0;
}
export declare namespace SummaryDeviceTypeResponse {
    interface Meta {
        dateRange: Array<Meta.DateRange>;
        lastUpdated: string;
        normalization: string;
        confidenceInfo?: Meta.ConfidenceInfo;
    }
    namespace Meta {
        interface DateRange {
            /**
             * Adjusted end of date range.
             */
            endTime: string;
            /**
             * Adjusted start of date range.
             */
            startTime: string;
        }
        interface ConfidenceInfo {
            annotations?: Array<ConfidenceInfo.Annotation>;
            level?: number;
        }
        namespace ConfidenceInfo {
            interface Annotation {
                dataSource: string;
                description: string;
                eventType: string;
                isInstantaneous: boolean;
                endTime?: string;
                linkedUrl?: string;
                startTime?: string;
            }
        }
    }
    interface Summary0 {
        desktop: string;
        mobile: string;
        other: string;
    }
}
export interface SummaryHTTPProtocolResponse {
    meta: SummaryHTTPProtocolResponse.Meta;
    summary_0: SummaryHTTPProtocolResponse.Summary0;
}
export declare namespace SummaryHTTPProtocolResponse {
    interface Meta {
        dateRange: Array<Meta.DateRange>;
        lastUpdated: string;
        normalization: string;
        confidenceInfo?: Meta.ConfidenceInfo;
    }
    namespace Meta {
        interface DateRange {
            /**
             * Adjusted end of date range.
             */
            endTime: string;
            /**
             * Adjusted start of date range.
             */
            startTime: string;
        }
        interface ConfidenceInfo {
            annotations?: Array<ConfidenceInfo.Annotation>;
            level?: number;
        }
        namespace ConfidenceInfo {
            interface Annotation {
                dataSource: string;
                description: string;
                eventType: string;
                isInstantaneous: boolean;
                endTime?: string;
                linkedUrl?: string;
                startTime?: string;
            }
        }
    }
    interface Summary0 {
        http: string;
        https: string;
    }
}
export interface SummaryHTTPVersionResponse {
    meta: SummaryHTTPVersionResponse.Meta;
    summary_0: SummaryHTTPVersionResponse.Summary0;
}
export declare namespace SummaryHTTPVersionResponse {
    interface Meta {
        dateRange: Array<Meta.DateRange>;
        lastUpdated: string;
        normalization: string;
        confidenceInfo?: Meta.ConfidenceInfo;
    }
    namespace Meta {
        interface DateRange {
            /**
             * Adjusted end of date range.
             */
            endTime: string;
            /**
             * Adjusted start of date range.
             */
            startTime: string;
        }
        interface ConfidenceInfo {
            annotations?: Array<ConfidenceInfo.Annotation>;
            level?: number;
        }
        namespace ConfidenceInfo {
            interface Annotation {
                dataSource: string;
                description: string;
                eventType: string;
                isInstantaneous: boolean;
                endTime?: string;
                linkedUrl?: string;
                startTime?: string;
            }
        }
    }
    interface Summary0 {
        'HTTP/1.x': string;
        'HTTP/2': string;
        'HTTP/3': string;
    }
}
export interface SummaryIPVersionResponse {
    meta: SummaryIPVersionResponse.Meta;
    summary_0: SummaryIPVersionResponse.Summary0;
}
export declare namespace SummaryIPVersionResponse {
    interface Meta {
        dateRange: Array<Meta.DateRange>;
        lastUpdated: string;
        normalization: string;
        confidenceInfo?: Meta.ConfidenceInfo;
    }
    namespace Meta {
        interface DateRange {
            /**
             * Adjusted end of date range.
             */
            endTime: string;
            /**
             * Adjusted start of date range.
             */
            startTime: string;
        }
        interface ConfidenceInfo {
            annotations?: Array<ConfidenceInfo.Annotation>;
            level?: number;
        }
        namespace ConfidenceInfo {
            interface Annotation {
                dataSource: string;
                description: string;
                eventType: string;
                isInstantaneous: boolean;
                endTime?: string;
                linkedUrl?: string;
                startTime?: string;
            }
        }
    }
    interface Summary0 {
        IPv4: string;
        IPv6: string;
    }
}
export interface SummaryOSResponse {
    meta: SummaryOSResponse.Meta;
    summary_0: SummaryOSResponse.Summary0;
}
export declare namespace SummaryOSResponse {
    interface Meta {
        dateRange: Array<Meta.DateRange>;
        lastUpdated: string;
        normalization: string;
        confidenceInfo?: Meta.ConfidenceInfo;
    }
    namespace Meta {
        interface DateRange {
            /**
             * Adjusted end of date range.
             */
            endTime: string;
            /**
             * Adjusted start of date range.
             */
            startTime: string;
        }
        interface ConfidenceInfo {
            annotations?: Array<ConfidenceInfo.Annotation>;
            level?: number;
        }
        namespace ConfidenceInfo {
            interface Annotation {
                dataSource: string;
                description: string;
                eventType: string;
                isInstantaneous: boolean;
                endTime?: string;
                linkedUrl?: string;
                startTime?: string;
            }
        }
    }
    interface Summary0 {
        ANDROID: string;
        IOS: string;
    }
}
export interface SummaryPostQuantumResponse {
    meta: SummaryPostQuantumResponse.Meta;
    summary_0: SummaryPostQuantumResponse.Summary0;
}
export declare namespace SummaryPostQuantumResponse {
    interface Meta {
        dateRange: Array<Meta.DateRange>;
        lastUpdated: string;
        normalization: string;
        confidenceInfo?: Meta.ConfidenceInfo;
    }
    namespace Meta {
        interface DateRange {
            /**
             * Adjusted end of date range.
             */
            endTime: string;
            /**
             * Adjusted start of date range.
             */
            startTime: string;
        }
        interface ConfidenceInfo {
            annotations?: Array<ConfidenceInfo.Annotation>;
            level?: number;
        }
        namespace ConfidenceInfo {
            interface Annotation {
                dataSource: string;
                description: string;
                eventType: string;
                isInstantaneous: boolean;
                endTime?: string;
                linkedUrl?: string;
                startTime?: string;
            }
        }
    }
    interface Summary0 {
        NOT_SUPPORTED: string;
        SUPPORTED: string;
    }
}
export interface SummaryTLSVersionResponse {
    meta: SummaryTLSVersionResponse.Meta;
    summary_0: SummaryTLSVersionResponse.Summary0;
}
export declare namespace SummaryTLSVersionResponse {
    interface Meta {
        dateRange: Array<Meta.DateRange>;
        lastUpdated: string;
        normalization: string;
        confidenceInfo?: Meta.ConfidenceInfo;
    }
    namespace Meta {
        interface DateRange {
            /**
             * Adjusted end of date range.
             */
            endTime: string;
            /**
             * Adjusted start of date range.
             */
            startTime: string;
        }
        interface ConfidenceInfo {
            annotations?: Array<ConfidenceInfo.Annotation>;
            level?: number;
        }
        namespace ConfidenceInfo {
            interface Annotation {
                dataSource: string;
                description: string;
                eventType: string;
                isInstantaneous: boolean;
                endTime?: string;
                linkedUrl?: string;
                startTime?: string;
            }
        }
    }
    interface Summary0 {
        'TLS 1.0': string;
        'TLS 1.1': string;
        'TLS 1.2': string;
        'TLS 1.3': string;
        'TLS QUIC': string;
    }
}
export interface SummaryBotClassParams {
    /**
     * Array of comma separated list of ASNs, start with `-` to exclude from results.
     * For example, `-174, 3356` excludes results from AS174, but includes results from
     * AS3356.
     */
    asn?: Array<string>;
    /**
     * Array of comma separated list of continents (alpha-2 continent codes). Start
     * with `-` to exclude from results. For example, `-EU,NA` excludes results from
     * Europe, but includes results from North America.
     */
    continent?: Array<string>;
    /**
     * End of the date range (inclusive).
     */
    dateEnd?: Array<string>;
    /**
     * For example, use `7d` and `7dControl` to compare this week with the previous
     * week. Use this parameter or set specific start and end dates (`dateStart` and
     * `dateEnd` parameters).
     */
    dateRange?: Array<'1d' | '2d' | '7d' | '14d' | '28d' | '12w' | '24w' | '52w' | '1dControl' | '2dControl' | '7dControl' | '14dControl' | '28dControl' | '12wControl' | '24wControl'>;
    /**
     * Array of datetimes to filter the start of a series.
     */
    dateStart?: Array<string>;
    /**
     * Filter for device type.
     */
    deviceType?: Array<'DESKTOP' | 'MOBILE' | 'OTHER'>;
    /**
     * Format results are returned in.
     */
    format?: 'JSON' | 'CSV';
    /**
     * Filter for http protocol.
     */
    httpProtocol?: Array<'HTTP' | 'HTTPS'>;
    /**
     * Filter for http version.
     */
    httpVersion?: Array<'HTTPv1' | 'HTTPv2' | 'HTTPv3'>;
    /**
     * Filter for ip version.
     */
    ipVersion?: Array<'IPv4' | 'IPv6'>;
    /**
     * Array of comma separated list of locations (alpha-2 country codes). Start with
     * `-` to exclude from results. For example, `-US,PT` excludes results from the US,
     * but includes results from PT.
     */
    location?: Array<string>;
    /**
     * Array of names that will be used to name the series in responses.
     */
    name?: Array<string>;
    /**
     * Filter for os name.
     */
    os?: Array<'WINDOWS' | 'MACOSX' | 'IOS' | 'ANDROID' | 'CHROMEOS' | 'LINUX' | 'SMART_TV'>;
    /**
     * Filter for tls version.
     */
    tlsVersion?: Array<'TLSv1_0' | 'TLSv1_1' | 'TLSv1_2' | 'TLSv1_3' | 'TLSvQUIC'>;
}
export interface SummaryDeviceTypeParams {
    /**
     * Array of comma separated list of ASNs, start with `-` to exclude from results.
     * For example, `-174, 3356` excludes results from AS174, but includes results from
     * AS3356.
     */
    asn?: Array<string>;
    /**
     * Filter for bot class. Refer to
     * [Bot classes](https://developers.cloudflare.com/radar/concepts/bot-classes/).
     */
    botClass?: Array<'LIKELY_AUTOMATED' | 'LIKELY_HUMAN'>;
    /**
     * Array of comma separated list of continents (alpha-2 continent codes). Start
     * with `-` to exclude from results. For example, `-EU,NA` excludes results from
     * Europe, but includes results from North America.
     */
    continent?: Array<string>;
    /**
     * End of the date range (inclusive).
     */
    dateEnd?: Array<string>;
    /**
     * For example, use `7d` and `7dControl` to compare this week with the previous
     * week. Use this parameter or set specific start and end dates (`dateStart` and
     * `dateEnd` parameters).
     */
    dateRange?: Array<'1d' | '2d' | '7d' | '14d' | '28d' | '12w' | '24w' | '52w' | '1dControl' | '2dControl' | '7dControl' | '14dControl' | '28dControl' | '12wControl' | '24wControl'>;
    /**
     * Array of datetimes to filter the start of a series.
     */
    dateStart?: Array<string>;
    /**
     * Format results are returned in.
     */
    format?: 'JSON' | 'CSV';
    /**
     * Filter for http protocol.
     */
    httpProtocol?: Array<'HTTP' | 'HTTPS'>;
    /**
     * Filter for http version.
     */
    httpVersion?: Array<'HTTPv1' | 'HTTPv2' | 'HTTPv3'>;
    /**
     * Filter for ip version.
     */
    ipVersion?: Array<'IPv4' | 'IPv6'>;
    /**
     * Array of comma separated list of locations (alpha-2 country codes). Start with
     * `-` to exclude from results. For example, `-US,PT` excludes results from the US,
     * but includes results from PT.
     */
    location?: Array<string>;
    /**
     * Array of names that will be used to name the series in responses.
     */
    name?: Array<string>;
    /**
     * Filter for os name.
     */
    os?: Array<'WINDOWS' | 'MACOSX' | 'IOS' | 'ANDROID' | 'CHROMEOS' | 'LINUX' | 'SMART_TV'>;
    /**
     * Filter for tls version.
     */
    tlsVersion?: Array<'TLSv1_0' | 'TLSv1_1' | 'TLSv1_2' | 'TLSv1_3' | 'TLSvQUIC'>;
}
export interface SummaryHTTPProtocolParams {
    /**
     * Array of comma separated list of ASNs, start with `-` to exclude from results.
     * For example, `-174, 3356` excludes results from AS174, but includes results from
     * AS3356.
     */
    asn?: Array<string>;
    /**
     * Filter for bot class. Refer to
     * [Bot classes](https://developers.cloudflare.com/radar/concepts/bot-classes/).
     */
    botClass?: Array<'LIKELY_AUTOMATED' | 'LIKELY_HUMAN'>;
    /**
     * Array of comma separated list of continents (alpha-2 continent codes). Start
     * with `-` to exclude from results. For example, `-EU,NA` excludes results from
     * Europe, but includes results from North America.
     */
    continent?: Array<string>;
    /**
     * End of the date range (inclusive).
     */
    dateEnd?: Array<string>;
    /**
     * For example, use `7d` and `7dControl` to compare this week with the previous
     * week. Use this parameter or set specific start and end dates (`dateStart` and
     * `dateEnd` parameters).
     */
    dateRange?: Array<'1d' | '2d' | '7d' | '14d' | '28d' | '12w' | '24w' | '52w' | '1dControl' | '2dControl' | '7dControl' | '14dControl' | '28dControl' | '12wControl' | '24wControl'>;
    /**
     * Array of datetimes to filter the start of a series.
     */
    dateStart?: Array<string>;
    /**
     * Filter for device type.
     */
    deviceType?: Array<'DESKTOP' | 'MOBILE' | 'OTHER'>;
    /**
     * Format results are returned in.
     */
    format?: 'JSON' | 'CSV';
    /**
     * Filter for http version.
     */
    httpVersion?: Array<'HTTPv1' | 'HTTPv2' | 'HTTPv3'>;
    /**
     * Filter for ip version.
     */
    ipVersion?: Array<'IPv4' | 'IPv6'>;
    /**
     * Array of comma separated list of locations (alpha-2 country codes). Start with
     * `-` to exclude from results. For example, `-US,PT` excludes results from the US,
     * but includes results from PT.
     */
    location?: Array<string>;
    /**
     * Array of names that will be used to name the series in responses.
     */
    name?: Array<string>;
    /**
     * Filter for os name.
     */
    os?: Array<'WINDOWS' | 'MACOSX' | 'IOS' | 'ANDROID' | 'CHROMEOS' | 'LINUX' | 'SMART_TV'>;
    /**
     * Filter for tls version.
     */
    tlsVersion?: Array<'TLSv1_0' | 'TLSv1_1' | 'TLSv1_2' | 'TLSv1_3' | 'TLSvQUIC'>;
}
export interface SummaryHTTPVersionParams {
    /**
     * Array of comma separated list of ASNs, start with `-` to exclude from results.
     * For example, `-174, 3356` excludes results from AS174, but includes results from
     * AS3356.
     */
    asn?: Array<string>;
    /**
     * Filter for bot class. Refer to
     * [Bot classes](https://developers.cloudflare.com/radar/concepts/bot-classes/).
     */
    botClass?: Array<'LIKELY_AUTOMATED' | 'LIKELY_HUMAN'>;
    /**
     * Array of comma separated list of continents (alpha-2 continent codes). Start
     * with `-` to exclude from results. For example, `-EU,NA` excludes results from
     * Europe, but includes results from North America.
     */
    continent?: Array<string>;
    /**
     * End of the date range (inclusive).
     */
    dateEnd?: Array<string>;
    /**
     * For example, use `7d` and `7dControl` to compare this week with the previous
     * week. Use this parameter or set specific start and end dates (`dateStart` and
     * `dateEnd` parameters).
     */
    dateRange?: Array<'1d' | '2d' | '7d' | '14d' | '28d' | '12w' | '24w' | '52w' | '1dControl' | '2dControl' | '7dControl' | '14dControl' | '28dControl' | '12wControl' | '24wControl'>;
    /**
     * Array of datetimes to filter the start of a series.
     */
    dateStart?: Array<string>;
    /**
     * Filter for device type.
     */
    deviceType?: Array<'DESKTOP' | 'MOBILE' | 'OTHER'>;
    /**
     * Format results are returned in.
     */
    format?: 'JSON' | 'CSV';
    /**
     * Filter for http protocol.
     */
    httpProtocol?: Array<'HTTP' | 'HTTPS'>;
    /**
     * Filter for ip version.
     */
    ipVersion?: Array<'IPv4' | 'IPv6'>;
    /**
     * Array of comma separated list of locations (alpha-2 country codes). Start with
     * `-` to exclude from results. For example, `-US,PT` excludes results from the US,
     * but includes results from PT.
     */
    location?: Array<string>;
    /**
     * Array of names that will be used to name the series in responses.
     */
    name?: Array<string>;
    /**
     * Filter for os name.
     */
    os?: Array<'WINDOWS' | 'MACOSX' | 'IOS' | 'ANDROID' | 'CHROMEOS' | 'LINUX' | 'SMART_TV'>;
    /**
     * Filter for tls version.
     */
    tlsVersion?: Array<'TLSv1_0' | 'TLSv1_1' | 'TLSv1_2' | 'TLSv1_3' | 'TLSvQUIC'>;
}
export interface SummaryIPVersionParams {
    /**
     * Array of comma separated list of ASNs, start with `-` to exclude from results.
     * For example, `-174, 3356` excludes results from AS174, but includes results from
     * AS3356.
     */
    asn?: Array<string>;
    /**
     * Filter for bot class. Refer to
     * [Bot classes](https://developers.cloudflare.com/radar/concepts/bot-classes/).
     */
    botClass?: Array<'LIKELY_AUTOMATED' | 'LIKELY_HUMAN'>;
    /**
     * Array of comma separated list of continents (alpha-2 continent codes). Start
     * with `-` to exclude from results. For example, `-EU,NA` excludes results from
     * Europe, but includes results from North America.
     */
    continent?: Array<string>;
    /**
     * End of the date range (inclusive).
     */
    dateEnd?: Array<string>;
    /**
     * For example, use `7d` and `7dControl` to compare this week with the previous
     * week. Use this parameter or set specific start and end dates (`dateStart` and
     * `dateEnd` parameters).
     */
    dateRange?: Array<'1d' | '2d' | '7d' | '14d' | '28d' | '12w' | '24w' | '52w' | '1dControl' | '2dControl' | '7dControl' | '14dControl' | '28dControl' | '12wControl' | '24wControl'>;
    /**
     * Array of datetimes to filter the start of a series.
     */
    dateStart?: Array<string>;
    /**
     * Filter for device type.
     */
    deviceType?: Array<'DESKTOP' | 'MOBILE' | 'OTHER'>;
    /**
     * Format results are returned in.
     */
    format?: 'JSON' | 'CSV';
    /**
     * Filter for http protocol.
     */
    httpProtocol?: Array<'HTTP' | 'HTTPS'>;
    /**
     * Filter for http version.
     */
    httpVersion?: Array<'HTTPv1' | 'HTTPv2' | 'HTTPv3'>;
    /**
     * Array of comma separated list of locations (alpha-2 country codes). Start with
     * `-` to exclude from results. For example, `-US,PT` excludes results from the US,
     * but includes results from PT.
     */
    location?: Array<string>;
    /**
     * Array of names that will be used to name the series in responses.
     */
    name?: Array<string>;
    /**
     * Filter for os name.
     */
    os?: Array<'WINDOWS' | 'MACOSX' | 'IOS' | 'ANDROID' | 'CHROMEOS' | 'LINUX' | 'SMART_TV'>;
    /**
     * Filter for tls version.
     */
    tlsVersion?: Array<'TLSv1_0' | 'TLSv1_1' | 'TLSv1_2' | 'TLSv1_3' | 'TLSvQUIC'>;
}
export interface SummaryOSParams {
    /**
     * Array of comma separated list of ASNs, start with `-` to exclude from results.
     * For example, `-174, 3356` excludes results from AS174, but includes results from
     * AS3356.
     */
    asn?: Array<string>;
    /**
     * Filter for bot class. Refer to
     * [Bot classes](https://developers.cloudflare.com/radar/concepts/bot-classes/).
     */
    botClass?: Array<'LIKELY_AUTOMATED' | 'LIKELY_HUMAN'>;
    /**
     * Array of comma separated list of continents (alpha-2 continent codes). Start
     * with `-` to exclude from results. For example, `-EU,NA` excludes results from
     * Europe, but includes results from North America.
     */
    continent?: Array<string>;
    /**
     * End of the date range (inclusive).
     */
    dateEnd?: Array<string>;
    /**
     * For example, use `7d` and `7dControl` to compare this week with the previous
     * week. Use this parameter or set specific start and end dates (`dateStart` and
     * `dateEnd` parameters).
     */
    dateRange?: Array<'1d' | '2d' | '7d' | '14d' | '28d' | '12w' | '24w' | '52w' | '1dControl' | '2dControl' | '7dControl' | '14dControl' | '28dControl' | '12wControl' | '24wControl'>;
    /**
     * Array of datetimes to filter the start of a series.
     */
    dateStart?: Array<string>;
    /**
     * Filter for device type.
     */
    deviceType?: Array<'DESKTOP' | 'MOBILE' | 'OTHER'>;
    /**
     * Format results are returned in.
     */
    format?: 'JSON' | 'CSV';
    /**
     * Filter for http protocol.
     */
    httpProtocol?: Array<'HTTP' | 'HTTPS'>;
    /**
     * Filter for http version.
     */
    httpVersion?: Array<'HTTPv1' | 'HTTPv2' | 'HTTPv3'>;
    /**
     * Filter for ip version.
     */
    ipVersion?: Array<'IPv4' | 'IPv6'>;
    /**
     * Array of comma separated list of locations (alpha-2 country codes). Start with
     * `-` to exclude from results. For example, `-US,PT` excludes results from the US,
     * but includes results from PT.
     */
    location?: Array<string>;
    /**
     * Array of names that will be used to name the series in responses.
     */
    name?: Array<string>;
    /**
     * Filter for tls version.
     */
    tlsVersion?: Array<'TLSv1_0' | 'TLSv1_1' | 'TLSv1_2' | 'TLSv1_3' | 'TLSvQUIC'>;
}
export interface SummaryPostQuantumParams {
    /**
     * Array of comma separated list of ASNs, start with `-` to exclude from results.
     * For example, `-174, 3356` excludes results from AS174, but includes results from
     * AS3356.
     */
    asn?: Array<string>;
    /**
     * Filter for bot class. Refer to
     * [Bot classes](https://developers.cloudflare.com/radar/concepts/bot-classes/).
     */
    botClass?: Array<'LIKELY_AUTOMATED' | 'LIKELY_HUMAN'>;
    /**
     * Array of comma separated list of continents (alpha-2 continent codes). Start
     * with `-` to exclude from results. For example, `-EU,NA` excludes results from
     * Europe, but includes results from North America.
     */
    continent?: Array<string>;
    /**
     * End of the date range (inclusive).
     */
    dateEnd?: Array<string>;
    /**
     * For example, use `7d` and `7dControl` to compare this week with the previous
     * week. Use this parameter or set specific start and end dates (`dateStart` and
     * `dateEnd` parameters).
     */
    dateRange?: Array<'1d' | '2d' | '7d' | '14d' | '28d' | '12w' | '24w' | '52w' | '1dControl' | '2dControl' | '7dControl' | '14dControl' | '28dControl' | '12wControl' | '24wControl'>;
    /**
     * Array of datetimes to filter the start of a series.
     */
    dateStart?: Array<string>;
    /**
     * Filter for device type.
     */
    deviceType?: Array<'DESKTOP' | 'MOBILE' | 'OTHER'>;
    /**
     * Format results are returned in.
     */
    format?: 'JSON' | 'CSV';
    /**
     * Filter for http protocol.
     */
    httpProtocol?: Array<'HTTP' | 'HTTPS'>;
    /**
     * Filter for http version.
     */
    httpVersion?: Array<'HTTPv1' | 'HTTPv2' | 'HTTPv3'>;
    /**
     * Filter for ip version.
     */
    ipVersion?: Array<'IPv4' | 'IPv6'>;
    /**
     * Array of comma separated list of locations (alpha-2 country codes). Start with
     * `-` to exclude from results. For example, `-US,PT` excludes results from the US,
     * but includes results from PT.
     */
    location?: Array<string>;
    /**
     * Array of names that will be used to name the series in responses.
     */
    name?: Array<string>;
    /**
     * Filter for os name.
     */
    os?: Array<'WINDOWS' | 'MACOSX' | 'IOS' | 'ANDROID' | 'CHROMEOS' | 'LINUX' | 'SMART_TV'>;
    /**
     * Filter for tls version.
     */
    tlsVersion?: Array<'TLSv1_0' | 'TLSv1_1' | 'TLSv1_2' | 'TLSv1_3' | 'TLSvQUIC'>;
}
export interface SummaryTLSVersionParams {
    /**
     * Array of comma separated list of ASNs, start with `-` to exclude from results.
     * For example, `-174, 3356` excludes results from AS174, but includes results from
     * AS3356.
     */
    asn?: Array<string>;
    /**
     * Filter for bot class. Refer to
     * [Bot classes](https://developers.cloudflare.com/radar/concepts/bot-classes/).
     */
    botClass?: Array<'LIKELY_AUTOMATED' | 'LIKELY_HUMAN'>;
    /**
     * Array of comma separated list of continents (alpha-2 continent codes). Start
     * with `-` to exclude from results. For example, `-EU,NA` excludes results from
     * Europe, but includes results from North America.
     */
    continent?: Array<string>;
    /**
     * End of the date range (inclusive).
     */
    dateEnd?: Array<string>;
    /**
     * For example, use `7d` and `7dControl` to compare this week with the previous
     * week. Use this parameter or set specific start and end dates (`dateStart` and
     * `dateEnd` parameters).
     */
    dateRange?: Array<'1d' | '2d' | '7d' | '14d' | '28d' | '12w' | '24w' | '52w' | '1dControl' | '2dControl' | '7dControl' | '14dControl' | '28dControl' | '12wControl' | '24wControl'>;
    /**
     * Array of datetimes to filter the start of a series.
     */
    dateStart?: Array<string>;
    /**
     * Filter for device type.
     */
    deviceType?: Array<'DESKTOP' | 'MOBILE' | 'OTHER'>;
    /**
     * Format results are returned in.
     */
    format?: 'JSON' | 'CSV';
    /**
     * Filter for http protocol.
     */
    httpProtocol?: Array<'HTTP' | 'HTTPS'>;
    /**
     * Filter for http version.
     */
    httpVersion?: Array<'HTTPv1' | 'HTTPv2' | 'HTTPv3'>;
    /**
     * Filter for ip version.
     */
    ipVersion?: Array<'IPv4' | 'IPv6'>;
    /**
     * Array of comma separated list of locations (alpha-2 country codes). Start with
     * `-` to exclude from results. For example, `-US,PT` excludes results from the US,
     * but includes results from PT.
     */
    location?: Array<string>;
    /**
     * Array of names that will be used to name the series in responses.
     */
    name?: Array<string>;
    /**
     * Filter for os name.
     */
    os?: Array<'WINDOWS' | 'MACOSX' | 'IOS' | 'ANDROID' | 'CHROMEOS' | 'LINUX' | 'SMART_TV'>;
}
export declare namespace Summary {
    export import SummaryBotClassResponse = SummaryAPI.SummaryBotClassResponse;
    export import SummaryDeviceTypeResponse = SummaryAPI.SummaryDeviceTypeResponse;
    export import SummaryHTTPProtocolResponse = SummaryAPI.SummaryHTTPProtocolResponse;
    export import SummaryHTTPVersionResponse = SummaryAPI.SummaryHTTPVersionResponse;
    export import SummaryIPVersionResponse = SummaryAPI.SummaryIPVersionResponse;
    export import SummaryOSResponse = SummaryAPI.SummaryOSResponse;
    export import SummaryPostQuantumResponse = SummaryAPI.SummaryPostQuantumResponse;
    export import SummaryTLSVersionResponse = SummaryAPI.SummaryTLSVersionResponse;
    export import SummaryBotClassParams = SummaryAPI.SummaryBotClassParams;
    export import SummaryDeviceTypeParams = SummaryAPI.SummaryDeviceTypeParams;
    export import SummaryHTTPProtocolParams = SummaryAPI.SummaryHTTPProtocolParams;
    export import SummaryHTTPVersionParams = SummaryAPI.SummaryHTTPVersionParams;
    export import SummaryIPVersionParams = SummaryAPI.SummaryIPVersionParams;
    export import SummaryOSParams = SummaryAPI.SummaryOSParams;
    export import SummaryPostQuantumParams = SummaryAPI.SummaryPostQuantumParams;
    export import SummaryTLSVersionParams = SummaryAPI.SummaryTLSVersionParams;
}
//# sourceMappingURL=summary.d.ts.map