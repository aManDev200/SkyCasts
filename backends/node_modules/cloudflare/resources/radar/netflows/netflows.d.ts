import * as Core from "../../../core.js";
import { APIResource } from "../../../resource.js";
import * as NetflowsAPI from "./netflows.js";
import * as TopAPI from "./top.js";
export declare class Netflows extends APIResource {
    top: TopAPI.Top;
    /**
     * Get network traffic change over time. Visit
     * https://en.wikipedia.org/wiki/NetFlow for more information on NetFlows.
     */
    timeseries(query?: NetflowTimeseriesParams, options?: Core.RequestOptions): Core.APIPromise<NetflowTimeseriesResponse>;
    timeseries(options?: Core.RequestOptions): Core.APIPromise<NetflowTimeseriesResponse>;
}
export interface NetflowTimeseriesResponse {
    meta: NetflowTimeseriesResponse.Meta;
    serie_0: NetflowTimeseriesResponse.Serie0;
}
export declare namespace NetflowTimeseriesResponse {
    interface Meta {
        aggInterval: string;
        dateRange: Array<Meta.DateRange>;
        lastUpdated: string;
        confidenceInfo?: Meta.ConfidenceInfo;
    }
    namespace Meta {
        interface DateRange {
            /**
             * Adjusted end of date range.
             */
            endTime: string;
            /**
             * Adjusted start of date range.
             */
            startTime: string;
        }
        interface ConfidenceInfo {
            annotations?: Array<ConfidenceInfo.Annotation>;
            level?: number;
        }
        namespace ConfidenceInfo {
            interface Annotation {
                dataSource: string;
                description: string;
                eventType: string;
                isInstantaneous: boolean;
                endTime?: string;
                linkedUrl?: string;
                startTime?: string;
            }
        }
    }
    interface Serie0 {
        timestamps: Array<string>;
        values: Array<string>;
    }
}
export interface NetflowTimeseriesParams {
    /**
     * Aggregation interval results should be returned in (for example, in 15 minutes
     * or 1 hour intervals). Refer to
     * [Aggregation intervals](https://developers.cloudflare.com/radar/concepts/aggregation-intervals/).
     */
    aggInterval?: '15m' | '1h' | '1d' | '1w';
    /**
     * Array of comma separated list of ASNs, start with `-` to exclude from results.
     * For example, `-174, 3356` excludes results from AS174, but includes results from
     * AS3356.
     */
    asn?: Array<string>;
    /**
     * Array of comma separated list of continents (alpha-2 continent codes). Start
     * with `-` to exclude from results. For example, `-EU,NA` excludes results from
     * Europe, but includes results from North America.
     */
    continent?: Array<string>;
    /**
     * End of the date range (inclusive).
     */
    dateEnd?: Array<string>;
    /**
     * For example, use `7d` and `7dControl` to compare this week with the previous
     * week. Use this parameter or set specific start and end dates (`dateStart` and
     * `dateEnd` parameters).
     */
    dateRange?: Array<'1d' | '2d' | '7d' | '14d' | '28d' | '12w' | '24w' | '52w' | '1dControl' | '2dControl' | '7dControl' | '14dControl' | '28dControl' | '12wControl' | '24wControl'>;
    /**
     * Array of datetimes to filter the start of a series.
     */
    dateStart?: Array<string>;
    /**
     * Format results are returned in.
     */
    format?: 'JSON' | 'CSV';
    /**
     * Array of comma separated list of locations (alpha-2 country codes). Start with
     * `-` to exclude from results. For example, `-US,PT` excludes results from the US,
     * but includes results from PT.
     */
    location?: Array<string>;
    /**
     * Array of names that will be used to name the series in responses.
     */
    name?: Array<string>;
    /**
     * Normalization method applied. Refer to
     * [Normalization methods](https://developers.cloudflare.com/radar/concepts/normalization/).
     */
    normalization?: 'PERCENTAGE_CHANGE' | 'MIN0_MAX';
    /**
     * Array of network traffic product types.
     */
    product?: Array<'HTTP' | 'ALL'>;
}
export declare namespace Netflows {
    export import NetflowTimeseriesResponse = NetflowsAPI.NetflowTimeseriesResponse;
    export import NetflowTimeseriesParams = NetflowsAPI.NetflowTimeseriesParams;
    export import Top = TopAPI.Top;
    export import TopAsesResponse = TopAPI.TopAsesResponse;
    export import TopLocationsResponse = TopAPI.TopLocationsResponse;
    export import TopAsesParams = TopAPI.TopAsesParams;
    export import TopLocationsParams = TopAPI.TopLocationsParams;
}
//# sourceMappingURL=netflows.d.ts.map