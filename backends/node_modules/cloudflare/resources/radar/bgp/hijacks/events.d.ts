import * as Core from "../../../../core.js";
import { APIResource } from "../../../../resource.js";
import * as EventsAPI from "./events.js";
import { V4PagePagination, type V4PagePaginationParams } from "../../../../pagination.js";
export declare class Events extends APIResource {
    /**
     * Get the BGP hijack events. (Beta)
     */
    list(query?: EventListParams, options?: Core.RequestOptions): Core.PagePromise<EventListResponsesV4PagePagination, EventListResponse>;
    list(options?: Core.RequestOptions): Core.PagePromise<EventListResponsesV4PagePagination, EventListResponse>;
}
export declare class EventListResponsesV4PagePagination extends V4PagePagination<EventListResponse> {
}
export interface EventListResponse {
    result: EventListResponse.Result;
    result_info: EventListResponse.ResultInfo;
    success: boolean;
}
export declare namespace EventListResponse {
    interface Result {
        asn_info: Array<Result.ASNInfo>;
        events: Array<Result.Event>;
        total_monitors: number;
    }
    namespace Result {
        interface ASNInfo {
            asn: number;
            country_code: string;
            org_name: string;
        }
        interface Event {
            id: number;
            confidence_score: number;
            duration: number;
            event_type: number;
            hijack_msgs_count: number;
            hijacker_asn: number;
            hijacker_country: string;
            is_stale: boolean;
            max_hijack_ts: string;
            max_msg_ts: string;
            min_hijack_ts: string;
            on_going_count: number;
            peer_asns: Array<number>;
            peer_ip_count: number;
            prefixes: Array<string>;
            tags: Array<Event.Tag>;
            victim_asns: Array<number>;
            victim_countries: Array<string>;
        }
        namespace Event {
            interface Tag {
                name: string;
                score: number;
            }
        }
    }
    interface ResultInfo {
        count: number;
        page: number;
        per_page: number;
        total_count: number;
    }
}
export interface EventListParams extends V4PagePaginationParams {
    /**
     * End of the date range (inclusive).
     */
    dateEnd?: string;
    /**
     * Shorthand date ranges for the last X days - use when you don't need specific
     * start and end dates.
     */
    dateRange?: '1d' | '2d' | '7d' | '14d' | '28d' | '12w' | '24w' | '52w' | '1dControl' | '2dControl' | '7dControl' | '14dControl' | '28dControl' | '12wControl' | '24wControl';
    /**
     * Start of the date range (inclusive).
     */
    dateStart?: string;
    /**
     * The unique identifier of a event
     */
    eventId?: number;
    /**
     * Format results are returned in.
     */
    format?: 'JSON' | 'CSV';
    /**
     * The potential hijacker AS of a BGP hijack event
     */
    hijackerAsn?: number;
    /**
     * The potential hijacker or victim AS of a BGP hijack event
     */
    involvedAsn?: number;
    /**
     * The country code of the potential hijacker or victim AS of a BGP hijack event
     */
    involvedCountry?: string;
    /**
     * The maximum confidence score to filter events (1-4 low, 5-7 mid, 8+ high)
     */
    maxConfidence?: number;
    /**
     * The minimum confidence score to filter events (1-4 low, 5-7 mid, 8+ high)
     */
    minConfidence?: number;
    /**
     * Network prefix, IPv4 or IPv6.
     */
    prefix?: string;
    /**
     * Sort events by field
     */
    sortBy?: 'ID' | 'TIME' | 'CONFIDENCE';
    /**
     * Sort order
     */
    sortOrder?: 'ASC' | 'DESC';
    /**
     * The potential victim AS of a BGP hijack event
     */
    victimAsn?: number;
}
export declare namespace Events {
    export import EventListResponse = EventsAPI.EventListResponse;
    export import EventListResponsesV4PagePagination = EventsAPI.EventListResponsesV4PagePagination;
    export import EventListParams = EventsAPI.EventListParams;
}
//# sourceMappingURL=events.d.ts.map