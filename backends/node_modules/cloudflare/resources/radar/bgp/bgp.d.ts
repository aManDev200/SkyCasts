import * as Core from "../../../core.js";
import { APIResource } from "../../../resource.js";
import * as BGPAPI from "./bgp.js";
import * as IPsAPI from "./ips.js";
import * as RoutesAPI from "./routes.js";
import * as HijacksAPI from "./hijacks/hijacks.js";
import * as LeaksAPI from "./leaks/leaks.js";
import * as TopAPI from "./top/top.js";
export declare class BGP extends APIResource {
    leaks: LeaksAPI.Leaks;
    top: TopAPI.Top;
    hijacks: HijacksAPI.Hijacks;
    routes: RoutesAPI.Routes;
    ips: IPsAPI.IPs;
    /**
     * Gets BGP updates change over time. Raw values are returned. When requesting
     * updates of an autonomous system (AS), only BGP updates of type announcement are
     * returned.
     */
    timeseries(query?: BGPTimeseriesParams, options?: Core.RequestOptions): Core.APIPromise<BGPTimeseriesResponse>;
    timeseries(options?: Core.RequestOptions): Core.APIPromise<BGPTimeseriesResponse>;
}
export interface BGPTimeseriesResponse {
    meta: BGPTimeseriesResponse.Meta;
    serie_0: BGPTimeseriesResponse.Serie0;
}
export declare namespace BGPTimeseriesResponse {
    interface Meta {
        aggInterval: string;
        dateRange: Array<Meta.DateRange>;
        lastUpdated: string;
        confidenceInfo?: Meta.ConfidenceInfo;
    }
    namespace Meta {
        interface DateRange {
            /**
             * Adjusted end of date range.
             */
            endTime: string;
            /**
             * Adjusted start of date range.
             */
            startTime: string;
        }
        interface ConfidenceInfo {
            annotations?: Array<ConfidenceInfo.Annotation>;
            level?: number;
        }
        namespace ConfidenceInfo {
            interface Annotation {
                dataSource: string;
                description: string;
                eventType: string;
                isInstantaneous: boolean;
                endTime?: string;
                linkedUrl?: string;
                startTime?: string;
            }
        }
    }
    interface Serie0 {
        timestamps: Array<string>;
        values: Array<string>;
    }
}
export interface BGPTimeseriesParams {
    /**
     * Aggregation interval results should be returned in (for example, in 15 minutes
     * or 1 hour intervals). Refer to
     * [Aggregation intervals](https://developers.cloudflare.com/radar/concepts/aggregation-intervals/).
     */
    aggInterval?: '15m' | '1h' | '1d' | '1w';
    /**
     * Array of comma separated list of ASNs, start with `-` to exclude from results.
     * For example, `-174, 3356` excludes results from AS174, but includes results from
     * AS3356.
     */
    asn?: Array<string>;
    /**
     * End of the date range (inclusive).
     */
    dateEnd?: Array<string>;
    /**
     * For example, use `7d` and `7dControl` to compare this week with the previous
     * week. Use this parameter or set specific start and end dates (`dateStart` and
     * `dateEnd` parameters).
     */
    dateRange?: Array<'1d' | '2d' | '7d' | '14d' | '28d' | '12w' | '24w' | '52w' | '1dControl' | '2dControl' | '7dControl' | '14dControl' | '28dControl' | '12wControl' | '24wControl'>;
    /**
     * Array of datetimes to filter the start of a series.
     */
    dateStart?: Array<string>;
    /**
     * Format results are returned in.
     */
    format?: 'JSON' | 'CSV';
    /**
     * Array of names that will be used to name the series in responses.
     */
    name?: Array<string>;
    /**
     * Array of BGP network prefixes.
     */
    prefix?: Array<BGPTimeseriesParams.Prefix>;
    /**
     * Array of BGP update types.
     */
    updateType?: Array<'ANNOUNCEMENT' | 'WITHDRAWAL'>;
}
export declare namespace BGPTimeseriesParams {
    interface Prefix {
        in: string;
        name: string;
        test: number;
        /**
         * Network prefix, IPv4 or IPv6.
         */
        type?: string;
    }
}
export declare namespace BGP {
    export import BGPTimeseriesResponse = BGPAPI.BGPTimeseriesResponse;
    export import BGPTimeseriesParams = BGPAPI.BGPTimeseriesParams;
    export import Leaks = LeaksAPI.Leaks;
    export import Top = TopAPI.Top;
    export import TopPrefixesResponse = TopAPI.TopPrefixesResponse;
    export import TopPrefixesParams = TopAPI.TopPrefixesParams;
    export import Hijacks = HijacksAPI.Hijacks;
    export import Routes = RoutesAPI.Routes;
    export import RouteAsesResponse = RoutesAPI.RouteAsesResponse;
    export import RouteMoasResponse = RoutesAPI.RouteMoasResponse;
    export import RoutePfx2asResponse = RoutesAPI.RoutePfx2asResponse;
    export import RouteStatsResponse = RoutesAPI.RouteStatsResponse;
    export import RouteAsesParams = RoutesAPI.RouteAsesParams;
    export import RouteMoasParams = RoutesAPI.RouteMoasParams;
    export import RoutePfx2asParams = RoutesAPI.RoutePfx2asParams;
    export import RouteStatsParams = RoutesAPI.RouteStatsParams;
    export import IPs = IPsAPI.IPs;
    export import IPTimeseriesResponse = IPsAPI.IPTimeseriesResponse;
    export import IPTimeseriesParams = IPsAPI.IPTimeseriesParams;
}
//# sourceMappingURL=bgp.d.ts.map