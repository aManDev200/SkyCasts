"use strict";
// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Radar = void 0;
const resource_1 = require("../../resource.js");
const ConnectionTamperingAPI = __importStar(require("./connection-tampering.js"));
const DatasetsAPI = __importStar(require("./datasets.js"));
const SearchAPI = __importStar(require("./search.js"));
const AnnotationsAPI = __importStar(require("./annotations/annotations.js"));
const AS112API = __importStar(require("./as112/as112.js"));
const AttacksAPI = __importStar(require("./attacks/attacks.js"));
const BGPAPI = __importStar(require("./bgp/bgp.js"));
const DNSAPI = __importStar(require("./dns/dns.js"));
const EmailAPI = __importStar(require("./email/email.js"));
const EntitiesAPI = __importStar(require("./entities/entities.js"));
const HTTPAPI = __importStar(require("./http/http.js"));
const NetflowsAPI = __importStar(require("./netflows/netflows.js"));
const QualityAPI = __importStar(require("./quality/quality.js"));
const RankingAPI = __importStar(require("./ranking/ranking.js"));
const TrafficAnomaliesAPI = __importStar(require("./traffic-anomalies/traffic-anomalies.js"));
const VerifiedBotsAPI = __importStar(require("./verified-bots/verified-bots.js"));
class Radar extends resource_1.APIResource {
    constructor() {
        super(...arguments);
        this.annotations = new AnnotationsAPI.Annotations(this._client);
        this.bgp = new BGPAPI.BGP(this._client);
        this.datasets = new DatasetsAPI.Datasets(this._client);
        this.dns = new DNSAPI.DNS(this._client);
        this.netflows = new NetflowsAPI.Netflows(this._client);
        this.search = new SearchAPI.Search(this._client);
        this.verifiedBots = new VerifiedBotsAPI.VerifiedBots(this._client);
        this.as112 = new AS112API.AS112(this._client);
        this.connectionTampering = new ConnectionTamperingAPI.ConnectionTampering(this._client);
        this.email = new EmailAPI.Email(this._client);
        this.attacks = new AttacksAPI.Attacks(this._client);
        this.entities = new EntitiesAPI.Entities(this._client);
        this.http = new HTTPAPI.HTTP(this._client);
        this.quality = new QualityAPI.Quality(this._client);
        this.ranking = new RankingAPI.Ranking(this._client);
        this.trafficAnomalies = new TrafficAnomaliesAPI.TrafficAnomalies(this._client);
    }
}
exports.Radar = Radar;
(function (Radar) {
    Radar.Annotations = AnnotationsAPI.Annotations;
    Radar.BGP = BGPAPI.BGP;
    Radar.Datasets = DatasetsAPI.Datasets;
    Radar.DNS = DNSAPI.DNS;
    Radar.Netflows = NetflowsAPI.Netflows;
    Radar.Search = SearchAPI.Search;
    Radar.VerifiedBots = VerifiedBotsAPI.VerifiedBots;
    Radar.AS112 = AS112API.AS112;
    Radar.ConnectionTampering = ConnectionTamperingAPI.ConnectionTampering;
    Radar.Email = EmailAPI.Email;
    Radar.Attacks = AttacksAPI.Attacks;
    Radar.Entities = EntitiesAPI.Entities;
    Radar.HTTP = HTTPAPI.HTTP;
    Radar.Quality = QualityAPI.Quality;
    Radar.Ranking = RankingAPI.Ranking;
    Radar.TrafficAnomalies = TrafficAnomaliesAPI.TrafficAnomalies;
})(Radar = exports.Radar || (exports.Radar = {}));
//# sourceMappingURL=radar.js.map