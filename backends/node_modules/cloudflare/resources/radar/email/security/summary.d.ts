import * as Core from "../../../../core.js";
import { APIResource } from "../../../../resource.js";
import * as SummaryAPI from "./summary.js";
import * as EmailAPI from "../email.js";
export declare class Summary extends APIResource {
    /**
     * Percentage distribution of emails classified per ARC validation.
     */
    arc(query?: SummaryARCParams, options?: Core.RequestOptions): Core.APIPromise<SummaryARCResponse>;
    arc(options?: Core.RequestOptions): Core.APIPromise<SummaryARCResponse>;
    /**
     * Percentage distribution of emails classified per DKIM validation.
     */
    dkim(query?: SummaryDKIMParams, options?: Core.RequestOptions): Core.APIPromise<SummaryDKIMResponse>;
    dkim(options?: Core.RequestOptions): Core.APIPromise<SummaryDKIMResponse>;
    /**
     * Percentage distribution of emails classified per DMARC validation.
     */
    dmarc(query?: SummaryDMARCParams, options?: Core.RequestOptions): Core.APIPromise<SummaryDMARCResponse>;
    dmarc(options?: Core.RequestOptions): Core.APIPromise<SummaryDMARCResponse>;
    /**
     * Percentage distribution of emails classified as MALICIOUS.
     */
    malicious(query?: SummaryMaliciousParams, options?: Core.RequestOptions): Core.APIPromise<SummaryMaliciousResponse>;
    malicious(options?: Core.RequestOptions): Core.APIPromise<SummaryMaliciousResponse>;
    /**
     * Proportion of emails categorized as either spam or legitimate (non-spam).
     */
    spam(query?: SummarySpamParams, options?: Core.RequestOptions): Core.APIPromise<SummarySpamResponse>;
    spam(options?: Core.RequestOptions): Core.APIPromise<SummarySpamResponse>;
    /**
     * Percentage distribution of emails classified per SPF validation.
     */
    spf(query?: SummarySPFParams, options?: Core.RequestOptions): Core.APIPromise<SummarySPFResponse>;
    spf(options?: Core.RequestOptions): Core.APIPromise<SummarySPFResponse>;
    /**
     * Proportion of emails categorized as either spoof or legitimate (non-spoof).
     */
    spoof(query?: SummarySpoofParams, options?: Core.RequestOptions): Core.APIPromise<SummarySpoofResponse>;
    spoof(options?: Core.RequestOptions): Core.APIPromise<SummarySpoofResponse>;
    /**
     * Percentage distribution of emails classified in Threat Categories.
     */
    threatCategory(query?: SummaryThreatCategoryParams, options?: Core.RequestOptions): Core.APIPromise<SummaryThreatCategoryResponse>;
    threatCategory(options?: Core.RequestOptions): Core.APIPromise<SummaryThreatCategoryResponse>;
    /**
     * Percentage distribution of emails classified per TLS Version.
     */
    tlsVersion(query?: SummaryTLSVersionParams, options?: Core.RequestOptions): Core.APIPromise<SummaryTLSVersionResponse>;
    tlsVersion(options?: Core.RequestOptions): Core.APIPromise<SummaryTLSVersionResponse>;
}
export interface SummaryARCResponse {
    meta: SummaryARCResponse.Meta;
    summary_0: EmailAPI.RadarEmailSummary;
}
export declare namespace SummaryARCResponse {
    interface Meta {
        dateRange: Array<Meta.DateRange>;
        lastUpdated: string;
        normalization: string;
        confidenceInfo?: Meta.ConfidenceInfo;
    }
    namespace Meta {
        interface DateRange {
            /**
             * Adjusted end of date range.
             */
            endTime: string;
            /**
             * Adjusted start of date range.
             */
            startTime: string;
        }
        interface ConfidenceInfo {
            annotations?: Array<ConfidenceInfo.Annotation>;
            level?: number;
        }
        namespace ConfidenceInfo {
            interface Annotation {
                dataSource: string;
                description: string;
                eventType: string;
                isInstantaneous: boolean;
                endTime?: string;
                linkedUrl?: string;
                startTime?: string;
            }
        }
    }
}
export interface SummaryDKIMResponse {
    meta: SummaryDKIMResponse.Meta;
    summary_0: EmailAPI.RadarEmailSummary;
}
export declare namespace SummaryDKIMResponse {
    interface Meta {
        dateRange: Array<Meta.DateRange>;
        lastUpdated: string;
        normalization: string;
        confidenceInfo?: Meta.ConfidenceInfo;
    }
    namespace Meta {
        interface DateRange {
            /**
             * Adjusted end of date range.
             */
            endTime: string;
            /**
             * Adjusted start of date range.
             */
            startTime: string;
        }
        interface ConfidenceInfo {
            annotations?: Array<ConfidenceInfo.Annotation>;
            level?: number;
        }
        namespace ConfidenceInfo {
            interface Annotation {
                dataSource: string;
                description: string;
                eventType: string;
                isInstantaneous: boolean;
                endTime?: string;
                linkedUrl?: string;
                startTime?: string;
            }
        }
    }
}
export interface SummaryDMARCResponse {
    meta: SummaryDMARCResponse.Meta;
    summary_0: EmailAPI.RadarEmailSummary;
}
export declare namespace SummaryDMARCResponse {
    interface Meta {
        dateRange: Array<Meta.DateRange>;
        lastUpdated: string;
        normalization: string;
        confidenceInfo?: Meta.ConfidenceInfo;
    }
    namespace Meta {
        interface DateRange {
            /**
             * Adjusted end of date range.
             */
            endTime: string;
            /**
             * Adjusted start of date range.
             */
            startTime: string;
        }
        interface ConfidenceInfo {
            annotations?: Array<ConfidenceInfo.Annotation>;
            level?: number;
        }
        namespace ConfidenceInfo {
            interface Annotation {
                dataSource: string;
                description: string;
                eventType: string;
                isInstantaneous: boolean;
                endTime?: string;
                linkedUrl?: string;
                startTime?: string;
            }
        }
    }
}
export interface SummaryMaliciousResponse {
    meta: SummaryMaliciousResponse.Meta;
    summary_0: SummaryMaliciousResponse.Summary0;
}
export declare namespace SummaryMaliciousResponse {
    interface Meta {
        dateRange: Array<Meta.DateRange>;
        lastUpdated: string;
        normalization: string;
        confidenceInfo?: Meta.ConfidenceInfo;
    }
    namespace Meta {
        interface DateRange {
            /**
             * Adjusted end of date range.
             */
            endTime: string;
            /**
             * Adjusted start of date range.
             */
            startTime: string;
        }
        interface ConfidenceInfo {
            annotations?: Array<ConfidenceInfo.Annotation>;
            level?: number;
        }
        namespace ConfidenceInfo {
            interface Annotation {
                dataSource: string;
                description: string;
                eventType: string;
                isInstantaneous: boolean;
                endTime?: string;
                linkedUrl?: string;
                startTime?: string;
            }
        }
    }
    interface Summary0 {
        MALICIOUS: string;
        NOT_MALICIOUS: string;
    }
}
export interface SummarySpamResponse {
    meta: SummarySpamResponse.Meta;
    summary_0: SummarySpamResponse.Summary0;
}
export declare namespace SummarySpamResponse {
    interface Meta {
        dateRange: Array<Meta.DateRange>;
        lastUpdated: string;
        normalization: string;
        confidenceInfo?: Meta.ConfidenceInfo;
    }
    namespace Meta {
        interface DateRange {
            /**
             * Adjusted end of date range.
             */
            endTime: string;
            /**
             * Adjusted start of date range.
             */
            startTime: string;
        }
        interface ConfidenceInfo {
            annotations?: Array<ConfidenceInfo.Annotation>;
            level?: number;
        }
        namespace ConfidenceInfo {
            interface Annotation {
                dataSource: string;
                description: string;
                eventType: string;
                isInstantaneous: boolean;
                endTime?: string;
                linkedUrl?: string;
                startTime?: string;
            }
        }
    }
    interface Summary0 {
        NOT_SPAM: string;
        SPAM: string;
    }
}
export interface SummarySPFResponse {
    meta: SummarySPFResponse.Meta;
    summary_0: EmailAPI.RadarEmailSummary;
}
export declare namespace SummarySPFResponse {
    interface Meta {
        dateRange: Array<Meta.DateRange>;
        lastUpdated: string;
        normalization: string;
        confidenceInfo?: Meta.ConfidenceInfo;
    }
    namespace Meta {
        interface DateRange {
            /**
             * Adjusted end of date range.
             */
            endTime: string;
            /**
             * Adjusted start of date range.
             */
            startTime: string;
        }
        interface ConfidenceInfo {
            annotations?: Array<ConfidenceInfo.Annotation>;
            level?: number;
        }
        namespace ConfidenceInfo {
            interface Annotation {
                dataSource: string;
                description: string;
                eventType: string;
                isInstantaneous: boolean;
                endTime?: string;
                linkedUrl?: string;
                startTime?: string;
            }
        }
    }
}
export interface SummarySpoofResponse {
    meta: SummarySpoofResponse.Meta;
    summary_0: SummarySpoofResponse.Summary0;
}
export declare namespace SummarySpoofResponse {
    interface Meta {
        dateRange: Array<Meta.DateRange>;
        lastUpdated: string;
        normalization: string;
        confidenceInfo?: Meta.ConfidenceInfo;
    }
    namespace Meta {
        interface DateRange {
            /**
             * Adjusted end of date range.
             */
            endTime: string;
            /**
             * Adjusted start of date range.
             */
            startTime: string;
        }
        interface ConfidenceInfo {
            annotations?: Array<ConfidenceInfo.Annotation>;
            level?: number;
        }
        namespace ConfidenceInfo {
            interface Annotation {
                dataSource: string;
                description: string;
                eventType: string;
                isInstantaneous: boolean;
                endTime?: string;
                linkedUrl?: string;
                startTime?: string;
            }
        }
    }
    interface Summary0 {
        NOT_SPOOF: string;
        SPOOF: string;
    }
}
export interface SummaryThreatCategoryResponse {
    meta: SummaryThreatCategoryResponse.Meta;
    summary_0: SummaryThreatCategoryResponse.Summary0;
}
export declare namespace SummaryThreatCategoryResponse {
    interface Meta {
        dateRange: Array<Meta.DateRange>;
        lastUpdated: string;
        normalization: string;
        confidenceInfo?: Meta.ConfidenceInfo;
    }
    namespace Meta {
        interface DateRange {
            /**
             * Adjusted end of date range.
             */
            endTime: string;
            /**
             * Adjusted start of date range.
             */
            startTime: string;
        }
        interface ConfidenceInfo {
            annotations?: Array<ConfidenceInfo.Annotation>;
            level?: number;
        }
        namespace ConfidenceInfo {
            interface Annotation {
                dataSource: string;
                description: string;
                eventType: string;
                isInstantaneous: boolean;
                endTime?: string;
                linkedUrl?: string;
                startTime?: string;
            }
        }
    }
    interface Summary0 {
        BrandImpersonation: string;
        CredentialHarvester: string;
        IdentityDeception: string;
        Link: string;
    }
}
export interface SummaryTLSVersionResponse {
    meta: SummaryTLSVersionResponse.Meta;
    summary_0: SummaryTLSVersionResponse.Summary0;
}
export declare namespace SummaryTLSVersionResponse {
    interface Meta {
        dateRange: Array<Meta.DateRange>;
        lastUpdated: string;
        normalization: string;
        confidenceInfo?: Meta.ConfidenceInfo;
    }
    namespace Meta {
        interface DateRange {
            /**
             * Adjusted end of date range.
             */
            endTime: string;
            /**
             * Adjusted start of date range.
             */
            startTime: string;
        }
        interface ConfidenceInfo {
            annotations?: Array<ConfidenceInfo.Annotation>;
            level?: number;
        }
        namespace ConfidenceInfo {
            interface Annotation {
                dataSource: string;
                description: string;
                eventType: string;
                isInstantaneous: boolean;
                endTime?: string;
                linkedUrl?: string;
                startTime?: string;
            }
        }
    }
    interface Summary0 {
        'TLS 1.0': string;
        'TLS 1.1': string;
        'TLS 1.2': string;
        'TLS 1.3': string;
    }
}
export interface SummaryARCParams {
    /**
     * End of the date range (inclusive).
     */
    dateEnd?: Array<string>;
    /**
     * For example, use `7d` and `7dControl` to compare this week with the previous
     * week. Use this parameter or set specific start and end dates (`dateStart` and
     * `dateEnd` parameters).
     */
    dateRange?: Array<'1d' | '2d' | '7d' | '14d' | '28d' | '12w' | '24w' | '52w' | '1dControl' | '2dControl' | '7dControl' | '14dControl' | '28dControl' | '12wControl' | '24wControl'>;
    /**
     * Array of datetimes to filter the start of a series.
     */
    dateStart?: Array<string>;
    /**
     * Filter for dkim.
     */
    dkim?: Array<'PASS' | 'NONE' | 'FAIL'>;
    /**
     * Filter for dmarc.
     */
    dmarc?: Array<'PASS' | 'NONE' | 'FAIL'>;
    /**
     * Format results are returned in.
     */
    format?: 'JSON' | 'CSV';
    /**
     * Array of names that will be used to name the series in responses.
     */
    name?: Array<string>;
    /**
     * Filter for spf.
     */
    spf?: Array<'PASS' | 'NONE' | 'FAIL'>;
    /**
     * Filter for tls version.
     */
    tlsVersion?: Array<'TLSv1_0' | 'TLSv1_1' | 'TLSv1_2' | 'TLSv1_3'>;
}
export interface SummaryDKIMParams {
    /**
     * Filter for arc (Authenticated Received Chain).
     */
    arc?: Array<'PASS' | 'NONE' | 'FAIL'>;
    /**
     * End of the date range (inclusive).
     */
    dateEnd?: Array<string>;
    /**
     * For example, use `7d` and `7dControl` to compare this week with the previous
     * week. Use this parameter or set specific start and end dates (`dateStart` and
     * `dateEnd` parameters).
     */
    dateRange?: Array<'1d' | '2d' | '7d' | '14d' | '28d' | '12w' | '24w' | '52w' | '1dControl' | '2dControl' | '7dControl' | '14dControl' | '28dControl' | '12wControl' | '24wControl'>;
    /**
     * Array of datetimes to filter the start of a series.
     */
    dateStart?: Array<string>;
    /**
     * Filter for dmarc.
     */
    dmarc?: Array<'PASS' | 'NONE' | 'FAIL'>;
    /**
     * Format results are returned in.
     */
    format?: 'JSON' | 'CSV';
    /**
     * Array of names that will be used to name the series in responses.
     */
    name?: Array<string>;
    /**
     * Filter for spf.
     */
    spf?: Array<'PASS' | 'NONE' | 'FAIL'>;
    /**
     * Filter for tls version.
     */
    tlsVersion?: Array<'TLSv1_0' | 'TLSv1_1' | 'TLSv1_2' | 'TLSv1_3'>;
}
export interface SummaryDMARCParams {
    /**
     * Filter for arc (Authenticated Received Chain).
     */
    arc?: Array<'PASS' | 'NONE' | 'FAIL'>;
    /**
     * End of the date range (inclusive).
     */
    dateEnd?: Array<string>;
    /**
     * For example, use `7d` and `7dControl` to compare this week with the previous
     * week. Use this parameter or set specific start and end dates (`dateStart` and
     * `dateEnd` parameters).
     */
    dateRange?: Array<'1d' | '2d' | '7d' | '14d' | '28d' | '12w' | '24w' | '52w' | '1dControl' | '2dControl' | '7dControl' | '14dControl' | '28dControl' | '12wControl' | '24wControl'>;
    /**
     * Array of datetimes to filter the start of a series.
     */
    dateStart?: Array<string>;
    /**
     * Filter for dkim.
     */
    dkim?: Array<'PASS' | 'NONE' | 'FAIL'>;
    /**
     * Format results are returned in.
     */
    format?: 'JSON' | 'CSV';
    /**
     * Array of names that will be used to name the series in responses.
     */
    name?: Array<string>;
    /**
     * Filter for spf.
     */
    spf?: Array<'PASS' | 'NONE' | 'FAIL'>;
    /**
     * Filter for tls version.
     */
    tlsVersion?: Array<'TLSv1_0' | 'TLSv1_1' | 'TLSv1_2' | 'TLSv1_3'>;
}
export interface SummaryMaliciousParams {
    /**
     * Filter for arc (Authenticated Received Chain).
     */
    arc?: Array<'PASS' | 'NONE' | 'FAIL'>;
    /**
     * End of the date range (inclusive).
     */
    dateEnd?: Array<string>;
    /**
     * For example, use `7d` and `7dControl` to compare this week with the previous
     * week. Use this parameter or set specific start and end dates (`dateStart` and
     * `dateEnd` parameters).
     */
    dateRange?: Array<'1d' | '2d' | '7d' | '14d' | '28d' | '12w' | '24w' | '52w' | '1dControl' | '2dControl' | '7dControl' | '14dControl' | '28dControl' | '12wControl' | '24wControl'>;
    /**
     * Array of datetimes to filter the start of a series.
     */
    dateStart?: Array<string>;
    /**
     * Filter for dkim.
     */
    dkim?: Array<'PASS' | 'NONE' | 'FAIL'>;
    /**
     * Filter for dmarc.
     */
    dmarc?: Array<'PASS' | 'NONE' | 'FAIL'>;
    /**
     * Format results are returned in.
     */
    format?: 'JSON' | 'CSV';
    /**
     * Array of names that will be used to name the series in responses.
     */
    name?: Array<string>;
    /**
     * Filter for spf.
     */
    spf?: Array<'PASS' | 'NONE' | 'FAIL'>;
    /**
     * Filter for tls version.
     */
    tlsVersion?: Array<'TLSv1_0' | 'TLSv1_1' | 'TLSv1_2' | 'TLSv1_3'>;
}
export interface SummarySpamParams {
    /**
     * Filter for arc (Authenticated Received Chain).
     */
    arc?: Array<'PASS' | 'NONE' | 'FAIL'>;
    /**
     * End of the date range (inclusive).
     */
    dateEnd?: Array<string>;
    /**
     * For example, use `7d` and `7dControl` to compare this week with the previous
     * week. Use this parameter or set specific start and end dates (`dateStart` and
     * `dateEnd` parameters).
     */
    dateRange?: Array<'1d' | '2d' | '7d' | '14d' | '28d' | '12w' | '24w' | '52w' | '1dControl' | '2dControl' | '7dControl' | '14dControl' | '28dControl' | '12wControl' | '24wControl'>;
    /**
     * Array of datetimes to filter the start of a series.
     */
    dateStart?: Array<string>;
    /**
     * Filter for dkim.
     */
    dkim?: Array<'PASS' | 'NONE' | 'FAIL'>;
    /**
     * Filter for dmarc.
     */
    dmarc?: Array<'PASS' | 'NONE' | 'FAIL'>;
    /**
     * Format results are returned in.
     */
    format?: 'JSON' | 'CSV';
    /**
     * Array of names that will be used to name the series in responses.
     */
    name?: Array<string>;
    /**
     * Filter for spf.
     */
    spf?: Array<'PASS' | 'NONE' | 'FAIL'>;
    /**
     * Filter for tls version.
     */
    tlsVersion?: Array<'TLSv1_0' | 'TLSv1_1' | 'TLSv1_2' | 'TLSv1_3'>;
}
export interface SummarySPFParams {
    /**
     * Filter for arc (Authenticated Received Chain).
     */
    arc?: Array<'PASS' | 'NONE' | 'FAIL'>;
    /**
     * End of the date range (inclusive).
     */
    dateEnd?: Array<string>;
    /**
     * For example, use `7d` and `7dControl` to compare this week with the previous
     * week. Use this parameter or set specific start and end dates (`dateStart` and
     * `dateEnd` parameters).
     */
    dateRange?: Array<'1d' | '2d' | '7d' | '14d' | '28d' | '12w' | '24w' | '52w' | '1dControl' | '2dControl' | '7dControl' | '14dControl' | '28dControl' | '12wControl' | '24wControl'>;
    /**
     * Array of datetimes to filter the start of a series.
     */
    dateStart?: Array<string>;
    /**
     * Filter for dkim.
     */
    dkim?: Array<'PASS' | 'NONE' | 'FAIL'>;
    /**
     * Filter for dmarc.
     */
    dmarc?: Array<'PASS' | 'NONE' | 'FAIL'>;
    /**
     * Format results are returned in.
     */
    format?: 'JSON' | 'CSV';
    /**
     * Array of names that will be used to name the series in responses.
     */
    name?: Array<string>;
    /**
     * Filter for tls version.
     */
    tlsVersion?: Array<'TLSv1_0' | 'TLSv1_1' | 'TLSv1_2' | 'TLSv1_3'>;
}
export interface SummarySpoofParams {
    /**
     * Filter for arc (Authenticated Received Chain).
     */
    arc?: Array<'PASS' | 'NONE' | 'FAIL'>;
    /**
     * End of the date range (inclusive).
     */
    dateEnd?: Array<string>;
    /**
     * For example, use `7d` and `7dControl` to compare this week with the previous
     * week. Use this parameter or set specific start and end dates (`dateStart` and
     * `dateEnd` parameters).
     */
    dateRange?: Array<'1d' | '2d' | '7d' | '14d' | '28d' | '12w' | '24w' | '52w' | '1dControl' | '2dControl' | '7dControl' | '14dControl' | '28dControl' | '12wControl' | '24wControl'>;
    /**
     * Array of datetimes to filter the start of a series.
     */
    dateStart?: Array<string>;
    /**
     * Filter for dkim.
     */
    dkim?: Array<'PASS' | 'NONE' | 'FAIL'>;
    /**
     * Filter for dmarc.
     */
    dmarc?: Array<'PASS' | 'NONE' | 'FAIL'>;
    /**
     * Format results are returned in.
     */
    format?: 'JSON' | 'CSV';
    /**
     * Array of names that will be used to name the series in responses.
     */
    name?: Array<string>;
    /**
     * Filter for spf.
     */
    spf?: Array<'PASS' | 'NONE' | 'FAIL'>;
    /**
     * Filter for tls version.
     */
    tlsVersion?: Array<'TLSv1_0' | 'TLSv1_1' | 'TLSv1_2' | 'TLSv1_3'>;
}
export interface SummaryThreatCategoryParams {
    /**
     * Filter for arc (Authenticated Received Chain).
     */
    arc?: Array<'PASS' | 'NONE' | 'FAIL'>;
    /**
     * End of the date range (inclusive).
     */
    dateEnd?: Array<string>;
    /**
     * For example, use `7d` and `7dControl` to compare this week with the previous
     * week. Use this parameter or set specific start and end dates (`dateStart` and
     * `dateEnd` parameters).
     */
    dateRange?: Array<'1d' | '2d' | '7d' | '14d' | '28d' | '12w' | '24w' | '52w' | '1dControl' | '2dControl' | '7dControl' | '14dControl' | '28dControl' | '12wControl' | '24wControl'>;
    /**
     * Array of datetimes to filter the start of a series.
     */
    dateStart?: Array<string>;
    /**
     * Filter for dkim.
     */
    dkim?: Array<'PASS' | 'NONE' | 'FAIL'>;
    /**
     * Filter for dmarc.
     */
    dmarc?: Array<'PASS' | 'NONE' | 'FAIL'>;
    /**
     * Format results are returned in.
     */
    format?: 'JSON' | 'CSV';
    /**
     * Array of names that will be used to name the series in responses.
     */
    name?: Array<string>;
    /**
     * Filter for spf.
     */
    spf?: Array<'PASS' | 'NONE' | 'FAIL'>;
    /**
     * Filter for tls version.
     */
    tlsVersion?: Array<'TLSv1_0' | 'TLSv1_1' | 'TLSv1_2' | 'TLSv1_3'>;
}
export interface SummaryTLSVersionParams {
    /**
     * Filter for arc (Authenticated Received Chain).
     */
    arc?: Array<'PASS' | 'NONE' | 'FAIL'>;
    /**
     * End of the date range (inclusive).
     */
    dateEnd?: Array<string>;
    /**
     * For example, use `7d` and `7dControl` to compare this week with the previous
     * week. Use this parameter or set specific start and end dates (`dateStart` and
     * `dateEnd` parameters).
     */
    dateRange?: Array<'1d' | '2d' | '7d' | '14d' | '28d' | '12w' | '24w' | '52w' | '1dControl' | '2dControl' | '7dControl' | '14dControl' | '28dControl' | '12wControl' | '24wControl'>;
    /**
     * Array of datetimes to filter the start of a series.
     */
    dateStart?: Array<string>;
    /**
     * Filter for dkim.
     */
    dkim?: Array<'PASS' | 'NONE' | 'FAIL'>;
    /**
     * Filter for dmarc.
     */
    dmarc?: Array<'PASS' | 'NONE' | 'FAIL'>;
    /**
     * Format results are returned in.
     */
    format?: 'JSON' | 'CSV';
    /**
     * Array of names that will be used to name the series in responses.
     */
    name?: Array<string>;
    /**
     * Filter for spf.
     */
    spf?: Array<'PASS' | 'NONE' | 'FAIL'>;
}
export declare namespace Summary {
    export import SummaryARCResponse = SummaryAPI.SummaryARCResponse;
    export import SummaryDKIMResponse = SummaryAPI.SummaryDKIMResponse;
    export import SummaryDMARCResponse = SummaryAPI.SummaryDMARCResponse;
    export import SummaryMaliciousResponse = SummaryAPI.SummaryMaliciousResponse;
    export import SummarySpamResponse = SummaryAPI.SummarySpamResponse;
    export import SummarySPFResponse = SummaryAPI.SummarySPFResponse;
    export import SummarySpoofResponse = SummaryAPI.SummarySpoofResponse;
    export import SummaryThreatCategoryResponse = SummaryAPI.SummaryThreatCategoryResponse;
    export import SummaryTLSVersionResponse = SummaryAPI.SummaryTLSVersionResponse;
    export import SummaryARCParams = SummaryAPI.SummaryARCParams;
    export import SummaryDKIMParams = SummaryAPI.SummaryDKIMParams;
    export import SummaryDMARCParams = SummaryAPI.SummaryDMARCParams;
    export import SummaryMaliciousParams = SummaryAPI.SummaryMaliciousParams;
    export import SummarySpamParams = SummaryAPI.SummarySpamParams;
    export import SummarySPFParams = SummaryAPI.SummarySPFParams;
    export import SummarySpoofParams = SummaryAPI.SummarySpoofParams;
    export import SummaryThreatCategoryParams = SummaryAPI.SummaryThreatCategoryParams;
    export import SummaryTLSVersionParams = SummaryAPI.SummaryTLSVersionParams;
}
//# sourceMappingURL=summary.d.ts.map