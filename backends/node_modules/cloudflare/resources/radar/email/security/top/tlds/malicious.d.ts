import * as Core from "../../../../../../core.js";
import { APIResource } from "../../../../../../resource.js";
import * as MaliciousAPI from "./malicious.js";
import * as TopAPI from "../../../../http/top.js";
export declare class Malicious extends APIResource {
    /**
     * Get the TLDs by emails classified as malicious or not.
     */
    get(malicious: 'MALICIOUS' | 'NOT_MALICIOUS', query?: MaliciousGetParams, options?: Core.RequestOptions): Core.APIPromise<MaliciousGetResponse>;
    get(malicious: 'MALICIOUS' | 'NOT_MALICIOUS', options?: Core.RequestOptions): Core.APIPromise<MaliciousGetResponse>;
}
export interface MaliciousGetResponse {
    meta: MaliciousGetResponse.Meta;
    top_0: Array<TopAPI.Browser>;
}
export declare namespace MaliciousGetResponse {
    interface Meta {
        dateRange: Array<Meta.DateRange>;
        lastUpdated: string;
        confidenceInfo?: Meta.ConfidenceInfo;
    }
    namespace Meta {
        interface DateRange {
            /**
             * Adjusted end of date range.
             */
            endTime: string;
            /**
             * Adjusted start of date range.
             */
            startTime: string;
        }
        interface ConfidenceInfo {
            annotations?: Array<ConfidenceInfo.Annotation>;
            level?: number;
        }
        namespace ConfidenceInfo {
            interface Annotation {
                dataSource: string;
                description: string;
                eventType: string;
                isInstantaneous: boolean;
                endTime?: string;
                linkedUrl?: string;
                startTime?: string;
            }
        }
    }
}
export interface MaliciousGetParams {
    /**
     * Filter for arc (Authenticated Received Chain).
     */
    arc?: Array<'PASS' | 'NONE' | 'FAIL'>;
    /**
     * End of the date range (inclusive).
     */
    dateEnd?: Array<string>;
    /**
     * For example, use `7d` and `7dControl` to compare this week with the previous
     * week. Use this parameter or set specific start and end dates (`dateStart` and
     * `dateEnd` parameters).
     */
    dateRange?: Array<'1d' | '2d' | '7d' | '14d' | '28d' | '12w' | '24w' | '52w' | '1dControl' | '2dControl' | '7dControl' | '14dControl' | '28dControl' | '12wControl' | '24wControl'>;
    /**
     * Array of datetimes to filter the start of a series.
     */
    dateStart?: Array<string>;
    /**
     * Filter for dkim.
     */
    dkim?: Array<'PASS' | 'NONE' | 'FAIL'>;
    /**
     * Filter for dmarc.
     */
    dmarc?: Array<'PASS' | 'NONE' | 'FAIL'>;
    /**
     * Format results are returned in.
     */
    format?: 'JSON' | 'CSV';
    /**
     * Limit the number of objects in the response.
     */
    limit?: number;
    /**
     * Array of names that will be used to name the series in responses.
     */
    name?: Array<string>;
    /**
     * Filter for spf.
     */
    spf?: Array<'PASS' | 'NONE' | 'FAIL'>;
    /**
     * Filter for TLDs by category.
     */
    tldCategory?: 'CLASSIC' | 'COUNTRY';
    /**
     * Filter for tls version.
     */
    tlsVersion?: Array<'TLSv1_0' | 'TLSv1_1' | 'TLSv1_2' | 'TLSv1_3'>;
}
export declare namespace Malicious {
    export import MaliciousGetResponse = MaliciousAPI.MaliciousGetResponse;
    export import MaliciousGetParams = MaliciousAPI.MaliciousGetParams;
}
//# sourceMappingURL=malicious.d.ts.map