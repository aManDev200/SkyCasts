import * as Core from "../../core.js";
import { APIResource } from "../../resource.js";
import * as SearchAPI from "./search.js";
export declare class Search extends APIResource {
    /**
     * Lets you search for locations, autonomous systems (AS) and reports.
     */
    global(query: SearchGlobalParams, options?: Core.RequestOptions): Core.APIPromise<SearchGlobalResponse>;
}
export interface SearchGlobalResponse {
    search: Array<SearchGlobalResponse.Search>;
}
export declare namespace SearchGlobalResponse {
    interface Search {
        code: string;
        name: string;
        type: string;
    }
}
export interface SearchGlobalParams {
    /**
     * Search for locations, AS and reports.
     */
    query: string;
    /**
     * Search types to be excluded from results.
     */
    exclude?: Array<'SPECIAL_EVENTS' | 'NOTEBOOKS' | 'LOCATIONS' | 'ASNS'>;
    /**
     * Format results are returned in.
     */
    format?: 'JSON' | 'CSV';
    /**
     * Search types to be included in results.
     */
    include?: Array<'SPECIAL_EVENTS' | 'NOTEBOOKS' | 'LOCATIONS' | 'ASNS'>;
    /**
     * Limit the number of objects in the response.
     */
    limit?: number;
    /**
     * Limit the number of objects per search category.
     */
    limitPerGroup?: number;
}
export declare namespace Search {
    export import SearchGlobalResponse = SearchAPI.SearchGlobalResponse;
    export import SearchGlobalParams = SearchAPI.SearchGlobalParams;
}
//# sourceMappingURL=search.d.ts.map